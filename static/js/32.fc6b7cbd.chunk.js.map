{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","artworks/A007.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","Artwork","props","PALETTE","ALL_CRYSTALS","hexagon","p5","posX","posY","radius","beginShape","thisVertex","pointOnCircle","vertex","x","y","endShape","CLOSE","angle","cos","sin","createVector","randomSelectTwo","Math","random","myTriangle","center","direction","layerConstructors","name","init","outlineShape","setState","state","weight","centeredShape","circles","simpleLines","dottedLines","ringOfShapes","steppedHexagons","numShapes","sides","render","stroke","layerColor","noFill","strokeWeight","thickStroke","lines","line","CRYSTAL_SIZE","rotate","circle","ellipse","pop","testLines","makeCrystal","pos","map","lcon","draw","stepsOut","thinStroke","singleStep","rando","floor","getRandomFromPalette","shapeSize","position","numSteps","int","step","start","stop","hexagonTrue","centerOffset","fill","noStroke","rect","randomShape","steps","fillColor","color","setup","canvasParentRef","createCanvas","START","SVG","parent","noLoop","angleMode","DEGREES","rectMode","CENTER","crystal","console","log","layer","translate","drawCrystal","keyPressed","keyCode","saveCanvas"],"mappings":"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","file":"static/js/32.fc6b7cbd.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nconst Artwork = (props) => {\r\n  const CRYSTAL_SIZE = 150;\r\n  const SIDES = 6;\r\n  // layout\r\n  const MARGIN = CRYSTAL_SIZE / 2;\r\n  const COLUMNS = 3;\r\n  const ROWS = 4;\r\n  const PADDING = CRYSTAL_SIZE * 0.2;\r\n  const GRIDBOX = CRYSTAL_SIZE + PADDING;\r\n  const START = CRYSTAL_SIZE / 2 + MARGIN;\r\n  let PALETTE = [];\r\n  let ALL_CRYSTALS = [];\r\n\r\n  const hexagon = (p5, posX, posY, radius) => {\r\n    const rotAngle = 360 / 6;\r\n    p5.beginShape();\r\n    for (let i = 0; i < 6; i++) {\r\n      const thisVertex = pointOnCircle(p5, posX, posY, radius, i * rotAngle);\r\n      p5.vertex(thisVertex.x, thisVertex.y);\r\n    }\r\n    p5.endShape(p5.CLOSE);\r\n  };\r\n\r\n  const pointOnCircle = (p5, posX, posY, radius, angle) => {\r\n    const x = posX + radius * p5.cos(angle);\r\n    const y = posY + radius * p5.sin(angle);\r\n    return p5.createVector(x, y);\r\n  };\r\n\r\n  const randomSelectTwo = () => {\r\n    const rando = Math.random();\r\n    return rando > 0.5 ? true : false;\r\n  };\r\n\r\n  const getRandomFromPalette = () => {\r\n    const rando = Math.floor(Math.random() * PALETTE.length);\r\n    return PALETTE[rando];\r\n  };\r\n\r\n  const testLines = (p5, state) => {\r\n    state.numShapes = randomSelectTwo() ? state.sides : state.sides * 2;\r\n    state.angle = 360 / state.numShapes;\r\n\r\n    return {\r\n      name: \"testLines\",\r\n      state,\r\n      render: () => {\r\n        p5.stroke(state.layerColor);\r\n        p5.noFill();\r\n        p5.strokeWeight(state.thickStroke);\r\n        p5.push();\r\n        // translate(width / 2, height / 2) //**\r\n        if (state.lines) {\r\n          for (let i = 0; i < 360 - 0.1; i += state.angle) {\r\n            p5.line(0, 0, 0, CRYSTAL_SIZE / 2);\r\n            p5.rotate(state.angle);\r\n          }\r\n        }\r\n        if (state.circle) {\r\n          p5.ellipse(0, 0, CRYSTAL_SIZE, CRYSTAL_SIZE);\r\n        }\r\n        p5.pop();\r\n      },\r\n    };\r\n  };\r\n\r\n  const myTriangle = (p5, center, radius, direction) => {\r\n    if (direction) {\r\n      p5.beginShape();\r\n      p5.vertex(center + radius * p5.cos(0), radius * p5.sin(0));\r\n      p5.vertex(center + radius * p5.cos(120), radius * p5.sin(120));\r\n      p5.vertex(center + radius * p5.cos(240), radius * p5.sin(240));\r\n      p5.endShape(p5.CLOSE);\r\n    } else {\r\n      p5.beginShape();\r\n      p5.vertex(center + radius * p5.cos(180), radius * p5.sin(180));\r\n      p5.vertex(center + radius * p5.cos(300), radius * p5.sin(300));\r\n      p5.vertex(center + radius * p5.cos(60), radius * p5.sin(60));\r\n      p5.endShape(p5.CLOSE);\r\n    }\r\n  };\r\n\r\n  const layerConstructors = [\r\n    {\r\n      name: \"Outline Shape\",\r\n      init: (p5, props) =>\r\n        outlineShape(p5, {\r\n          ...props,\r\n          ...setState(p5, state),\r\n        }),\r\n      weight: 0.3,\r\n    },\r\n    {\r\n      name: \"Centered Shape\",\r\n      init: (p5, props) =>\r\n        centeredShape(p5, {\r\n          ...props,\r\n          ...setState(state),\r\n        }),\r\n      weight: 0.3,\r\n    },\r\n    {\r\n      name: \"Circles\",\r\n      init: (p5, props) =>\r\n        circles(p5, {\r\n          ...props,\r\n          ...setState(p5, state),\r\n        }),\r\n      weight: 0.3,\r\n    },\r\n    {\r\n      name: \"Simple Lines\",\r\n      init: (p5, props) =>\r\n        simpleLines(p5, {\r\n          ...props,\r\n          ...setState(p5, state),\r\n        }),\r\n      weight: 0.3,\r\n    },\r\n    {\r\n      name: \"Dotted Lines\",\r\n      init: (p5, props) =>\r\n        dottedLines(p5, {\r\n          ...props,\r\n          ...setState(p5, state),\r\n        }),\r\n      weight: 0.3,\r\n    },\r\n    {\r\n      name: \"Ring of Shapes\",\r\n      init: (p5, props) =>\r\n        ringOfShapes(p5, {\r\n          ...props,\r\n          ...setState(p5, state),\r\n        }),\r\n      weight: 0.3,\r\n    },\r\n    {\r\n      name: \"Stepped Hexagons\",\r\n      init: (p5, props) =>\r\n        steppedHexagons(p5, {\r\n          ...props,\r\n          ...setState(p5, state),\r\n        }),\r\n      weight: 0.7,\r\n    },\r\n    {\r\n      name: \"Test Lines\",\r\n      init: (p5, props) =>\r\n        testLines(p5, {\r\n          lines: false,\r\n          circle: false,\r\n          ...props,\r\n          ...setState(p5, state),\r\n        }),\r\n      weight: 1,\r\n    },\r\n  ];\r\n\r\n  const makeCrystal = (p5, pos) => {\r\n    const layers = layerConstructors.map((lcon) => {\r\n      let picker = p5.random(1);\r\n      const draw = picker > lcon.weight;\r\n      // const draw = lcon.name === 'Test Lines'\r\n      return lcon.init(p5, {\r\n        pos,\r\n        draw,\r\n      });\r\n    });\r\n    return layers;\r\n  };\r\n\r\n  const drawCrystal = (p5, crystal) => {\r\n    crystal.forEach((layer) => {\r\n      if (layer.state.draw) {\r\n        p5.push();\r\n        p5.translate(layer.state.pos.x, layer.state.pos.y);\r\n        layer.render();\r\n        p5.pop();\r\n      }\r\n    });\r\n  };\r\n\r\n  const state = {\r\n    sides: SIDES,\r\n    stepsOut: 8,\r\n    thinStroke: 1,\r\n    thickStroke: 3,\r\n  };\r\n\r\n  const setState = (state) => {\r\n    state.numShapes = state.sides;\r\n    state.angle = 360 / state.numShapes;\r\n    state.singleStep = CRYSTAL_SIZE / 2 / state.stepsOut;\r\n    state.layerColor = getRandomFromPalette();\r\n    return state;\r\n  };\r\n\r\n  const circles = (p5, state) => {\r\n    state.shapeSize = (CRYSTAL_SIZE / 2) * 0.93;\r\n    state.position = CRYSTAL_SIZE / 2 - state.shapeSize / 2;\r\n\r\n    return {\r\n      name: \"circles\",\r\n      state,\r\n      render: () => {\r\n        p5.noFill();\r\n        p5.stroke(state.layerColor);\r\n        p5.strokeWeight(1);\r\n        p5.push();\r\n        //translate(width/2, height/2)\r\n        for (let i = 0; i <= state.numShapes; i++) {\r\n          p5.ellipse(state.position, 0, state.shapeSize, state.shapeSize);\r\n          p5.rotate(state.angle);\r\n        }\r\n        p5.pop();\r\n      },\r\n    };\r\n  };\r\n\r\n  const simpleLines = (p5, state) => {\r\n    state.numSteps = randomSelectTwo() ? state.stepsOut : p5.int(state.stepsOut * 1.25);\r\n    state.step = CRYSTAL_SIZE / 2 / state.numSteps;\r\n    state.start = p5.floor(p5.random(0, state.numSteps));\r\n    state.stop = p5.floor(p5.random(state.start, state.numSteps + 1));\r\n    state.weight = randomSelectTwo() ? state.thinStroke : state.thickStroke;\r\n    state.numShapes = randomSelectTwo() ? state.sides : state.sides * 2;\r\n    state.angle = 360 / state.numShapes;\r\n\r\n    return {\r\n      name: \"Simple Lines\",\r\n      state,\r\n      render: () => {\r\n        p5.noFill();\r\n        p5.stroke(state.layerColor);\r\n        p5.strokeWeight(state.weight);\r\n        p5.push();\r\n        //translate(width/2, height/2)\r\n        for (let i = 0; i < state.numShapes; i++) {\r\n          p5.line(state.start * state.step, 0, state.stop * state.step, 0);\r\n          p5.rotate(state.angle);\r\n        }\r\n        p5.pop();\r\n      },\r\n    };\r\n  };\r\n\r\n  const outlineShape = (p5, state) => {\r\n    state.weight = randomSelectTwo() ? state.thinStroke : state.thickStroke;\r\n    state.hexagonTrue = randomSelectTwo();\r\n\r\n    return {\r\n      name: \"Outline Shape\",\r\n      state,\r\n      render: () => {\r\n        p5.stroke(state.layerColor);\r\n        p5.strokeWeight(state.weight);\r\n        p5.push();\r\n        //translate(width/2, height/2)\r\n        if (state.hexagonTrue) {\r\n          hexagon(p5, 0, 0, CRYSTAL_SIZE / 2);\r\n        } else {\r\n          p5.ellipse(0, 0, CRYSTAL_SIZE, CRYSTAL_SIZE);\r\n        }\r\n        p5.pop();\r\n      },\r\n    };\r\n  };\r\n\r\n  const dottedLines = (p5, state) => {\r\n    state.numShapes = randomSelectTwo() ? state.sides : state.sides * 2;\r\n    state.angle = 360 / state.numShapes;\r\n    state.shapeSize = 3;\r\n    state.centerOffset = state.singleStep;\r\n\r\n    return {\r\n      name: \"Dotted Lines\",\r\n      state,\r\n      render: () => {\r\n        p5.fill(state.layerColor);\r\n        p5.noStroke();\r\n        p5.push();\r\n        //translate(width / 2, height / 2)\r\n        for (let i = 0; i <= state.numShapes; i++) {\r\n          for (let x = state.centerOffset; x < CRYSTAL_SIZE / 2; x += state.singleStep) {\r\n            p5.rect(x, 0, state.shapeSize, state.shapeSize);\r\n          }\r\n          p5.rotate(state.angle);\r\n        }\r\n        p5.pop();\r\n      },\r\n    };\r\n  };\r\n\r\n  const centeredShape = (p5, state) => {\r\n    state.randomShape = p5.random(1);\r\n    state.shapeSize = p5.floor(p5.random(state.stepsOut / 2, state.stepsOut - 2)) * state.singleStep;\r\n\r\n    return {\r\n      name: \"Centered Shape\",\r\n      state,\r\n      render: () => {\r\n        p5.fill(state.layerColor);\r\n        p5.noStroke();\r\n        p5.push();\r\n        // translate(width / 2, height / 2)\r\n        if (state.randomShape < 0.1) {\r\n          p5.rect(0, 0, state.shapeSize * 2, state.shapeSize * 2);\r\n        } else if (state.randomShape >= 0.1 && state.randomShape < 0.6) {\r\n          p5.ellipse(0, 0, state.shapeSize * 2, state.shapeSize * 2);\r\n        } else if (state.randomShape >= 0.6) {\r\n          p5.rotate(state.angle / 2);\r\n          hexagon(p5, 0, 0, state.shapeSize);\r\n        }\r\n        p5.pop();\r\n      },\r\n    };\r\n  };\r\n\r\n  const ringOfShapes = (p5, state) => {\r\n    state.steps = p5.floor(p5.random(1, state.stepsOut));\r\n    state.center = state.steps * state.singleStep;\r\n    state.randomShape = p5.random(1);\r\n    state.direction = randomSelectTwo(p5); // used for triangle only\r\n    state.fillColor = randomSelectTwo(p5) ? state.layerColor : p5.color(0, 1);\r\n    state.weight = randomSelectTwo(p5) ? state.thinStroke : state.thickStroke;\r\n\r\n    if (state.steps < state.stepsOut / 2) {\r\n      state.radius = p5.floor(p5.random(1, state.steps)) * state.singleStep;\r\n    } else if (state.steps > state.stepsOut / 2) {\r\n      state.radius = p5.floor(p5.random(1, state.stepsOut - state.steps)) * state.singleStep;\r\n    } else {\r\n      state.radius = p5.floor(p5.random(1, state.stepsOut / 2 + 1)) * state.singleStep;\r\n    }\r\n\r\n    return {\r\n      name: \"Ring of Shapes\",\r\n      state,\r\n      render: () => {\r\n        p5.stroke(state.layerColor);\r\n        p5.fill(state.fillColor);\r\n        p5.strokeWeight(state.weight);\r\n        p5.push();\r\n        //translate(width / 2, height / 2)\r\n        for (let i = 0; i < state.numShapes; i++) {\r\n          if (state.randomShape < 0.33) {\r\n            p5.ellipse(0, state.center, state.radius, state.radius);\r\n          } else if (state.randomShape >= 0.33 && state.randomShape < 0.66) {\r\n            p5.rect(0, state.center, state.radius, state.radius);\r\n          } else if (state.randomShape >= 0.66) {\r\n            myTriangle(p5, state.center, state.radius, state.direction);\r\n          }\r\n          p5.rotate(state.angle);\r\n        }\r\n        p5.pop();\r\n      },\r\n    };\r\n  };\r\n\r\n  const steppedHexagons = (p5, state) => {\r\n    state.numSteps = randomSelectTwo(p5) ? state.stepsOut : state.stepsOut * 1.25;\r\n    state.centerOffset = (CRYSTAL_SIZE / 2) * 0.15;\r\n    state.singleStep = (CRYSTAL_SIZE / 2 - state.centerOffset) / state.numSteps;\r\n    state.weight = randomSelectTwo(p5) ? state.thinStroke : state.thickStroke;\r\n\r\n    return {\r\n      name: \"Stepped Hexagons\",\r\n      state,\r\n      render: () => {\r\n        p5.stroke(state.layerColor);\r\n        p5.noFill();\r\n        p5.strokeWeight(state.weight);\r\n        p5.push();\r\n        //translate(width / 2, height / 2)\r\n        p5.rotate(state.angle / 2);\r\n        for (let i = 1; i < state.numSteps + 1; i++) {\r\n          hexagon(p5, 0, 0, state.centerOffset + i * state.singleStep);\r\n        }\r\n        p5.pop();\r\n      },\r\n    };\r\n  };\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    const totalX = START + GRIDBOX * COLUMNS;\r\n    const totalY = START + GRIDBOX * ROWS;\r\n    p5.createCanvas(totalX, totalY, p5.SVG).parent(canvasParentRef);\r\n\r\n    PALETTE = [\r\n      p5.color(255, 52, 154), // pink\r\n      p5.color(4, 0, 152), // blue\r\n    ];\r\n\r\n    p5.noLoop();\r\n    p5.angleMode(p5.DEGREES);\r\n    p5.rectMode(p5.CENTER);\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    // go to a point on the screen and draw a crystal\r\n    // continue to do this until we run out of room\r\n    for (let x = 0; x < COLUMNS; x++) {\r\n      for (let y = 0; y < ROWS; y++) {\r\n        const posX = START + x * GRIDBOX;\r\n        const posY = START + y * GRIDBOX;\r\n        const crystal = makeCrystal(p5, { x: posX, y: posY });\r\n        console.log(crystal);\r\n        ALL_CRYSTALS.push(crystal);\r\n      }\r\n    }\r\n\r\n    ALL_CRYSTALS.forEach((crystal) => {\r\n      drawCrystal(p5, crystal);\r\n    });\r\n  };\r\n\r\n  const keyPressed = (p5) => {\r\n    //save the canvas when press \"s\" or space\r\n    if (p5.keyCode === 83 || p5.keyCode === 32) {\r\n      p5.saveCanvas(\"simons_artwork\", \"jpg\");\r\n    }\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} keyPressed={keyPressed} />;\r\n};\r\n\r\nexport default Artwork;"],"sourceRoot":""}