{"version":3,"sources":["web3/Connectors.js","web3/Web3.js","web3/Hooks.js"],"names":["RPC_URLS","injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","1","4","defaultChainId","walletconnect","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","walletlink","WalletLinkConnector","url","appName","ledger","LedgerConnector","chainId","trezor","TrezorConnector","manifestEmail","manifestAppUrl","authereum","AuthereumConnector","fortmatic","FortmaticConnector","apiKey","process","FORTMATIC_API_KEY","magic","MagicConnector","MAGIC_API_KEY","email","portis","PortisConnector","dAppId","PORTIS_DAPP_ID","networks","torus","TorusConnector","ConnectorNames","connectorsByName","getLibrary","provider","library","Web3Provider","Header","useWeb3React","active","error","account","React","useState","balance","setBalance","useEffect","stale","getBalance","then","catch","undefined","Typography","variant","gutterBottom","substring","length","formatEther","App","context","connector","activate","deactivate","message","setMessage","activatingConnector","setActivatingConnector","triedEager","tried","setTried","isAuthorized","useEagerConnect","suppress","ethereum","window","on","handleConnect","console","log","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","style","display","gridGap","gridTemplateColumns","maxWidth","margin","Object","keys","map","name","currentConnector","activating","connected","disabled","Button","color","key","onClick","position","top","left","height","alignItems","role","aria-label","flexDirection","marginTop","marginBottom","NoEthereumProviderError","UnsupportedChainIdError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","UserRejectedRequestErrorFrame","getErrorMessage","getSigner","signMessage","signature","localStorage","setItem","setSeed","setSeedCanceled","changeChainId","close","Web3"],"mappings":"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","file":"static/js/5.6d731244.chunk.js","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\r\nimport { NetworkConnector } from '@web3-react/network-connector'\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\r\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\r\nimport { LedgerConnector } from '@web3-react/ledger-connector'\r\nimport { TrezorConnector } from '@web3-react/trezor-connector'\r\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\r\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector'\r\nimport { MagicConnector } from '@web3-react/magic-connector'\r\nimport { PortisConnector } from '@web3-react/portis-connector'\r\nimport { TorusConnector } from '@web3-react/torus-connector'\r\n\r\nconst POLLING_INTERVAL = 12000\r\nconst RPC_URLS = {\r\n  1: \"https://eth-goerli.alchemyapi.io/v2/HBnLxQgYavM5ZGSVWyMeBmpBOtZFqYib\",\r\n  4: \"https://eth-goerli.alchemyapi.io/v2/HBnLxQgYavM5ZGSVWyMeBmpBOtZFqYib\"\r\n} \r\n\r\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\r\n\r\nexport const network = new NetworkConnector({\r\n  urls: { 1: RPC_URLS[1], 4: RPC_URLS[4] },\r\n  defaultChainId: 1\r\n})\r\n\r\nexport const walletconnect = new WalletConnectConnector({\r\n  rpc: { 1: RPC_URLS[1] },\r\n  bridge: 'https://bridge.walletconnect.org',\r\n  qrcode: true,\r\n  pollingInterval: POLLING_INTERVAL\r\n})\r\n\r\nexport const walletlink = new WalletLinkConnector({\r\n  url: RPC_URLS[1],\r\n  appName: 'web3-react example'\r\n})\r\n\r\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\r\n\r\nexport const trezor = new TrezorConnector({\r\n  chainId: 1,\r\n  url: RPC_URLS[1],\r\n  pollingInterval: POLLING_INTERVAL,\r\n  manifestEmail: 'dummy@abc.xyz',\r\n  manifestAppUrl: 'http://localhost:1234'\r\n})\r\n\r\nexport const authereum = new AuthereumConnector({ chainId: 42 })\r\n\r\nexport const fortmatic = new FortmaticConnector({ apiKey: process.env.FORTMATIC_API_KEY, chainId: 4 })\r\n\r\nexport const magic = new MagicConnector({\r\n  apiKey: process.env.MAGIC_API_KEY,\r\n  chainId: 4,\r\n  email: 'hello@example.org'\r\n})\r\n\r\nexport const portis = new PortisConnector({ dAppId: process.env.PORTIS_DAPP_ID, networks: [1, 100] })\r\n\r\nexport const torus = new TorusConnector({ chainId: 1 })\r\n","import React from 'react'\r\n//material-ui\r\n// import Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n// web3\r\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\r\nimport {\r\n  NoEthereumProviderError,\r\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\r\n} from '@web3-react/injected-connector'\r\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\r\nimport { UserRejectedRequestError as UserRejectedRequestErrorFrame } from '@web3-react/frame-connector'\r\nimport { Web3Provider } from '@ethersproject/providers'\r\nimport { formatEther } from '@ethersproject/units'\r\n// custom\r\nimport { useEagerConnect, useInactiveListener } from './Hooks'\r\nimport {\r\n  injected,\r\n  network,\r\n  walletconnect,\r\n  walletlink,\r\n  ledger,\r\n  trezor,\r\n  authereum,\r\n  fortmatic,\r\n  magic,\r\n  portis,\r\n  torus\r\n} from './Connectors'\r\n\r\nconst ConnectorNames = {\r\n  Injected: 'Injected',\r\n  Network: 'Network',\r\n  WalletConnect: 'WalletConnect',\r\n  WalletLink: 'WalletLink',\r\n  Ledger: 'Ledger',\r\n  Trezor: 'Trezor',\r\n  Authereum: 'Authereum',\r\n  Fortmatic: 'Fortmatic',\r\n  Magic: 'Magic',\r\n  Portis: 'Portis',\r\n  Torus: 'Torus'\r\n}\r\n\r\nconst connectorsByName = {\r\n  [ConnectorNames.Injected]: injected,\r\n  [ConnectorNames.Network]: network,\r\n  [ConnectorNames.WalletConnect]: walletconnect,\r\n  [ConnectorNames.WalletLink]: walletlink,\r\n  [ConnectorNames.Ledger]: ledger,\r\n  [ConnectorNames.Trezor]: trezor,\r\n  [ConnectorNames.Authereum]: authereum,\r\n  [ConnectorNames.Fortmatic]: fortmatic,\r\n  [ConnectorNames.Magic]: magic,\r\n  [ConnectorNames.Portis]: portis,\r\n  [ConnectorNames.Torus]: torus\r\n}\r\n\r\nfunction getErrorMessage(error) {\r\n  if (error instanceof NoEthereumProviderError) {\r\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\r\n  } else if (error instanceof UnsupportedChainIdError) {\r\n    return \"You're connected to an unsupported network.\"\r\n  } else if (\r\n    error instanceof UserRejectedRequestErrorInjected ||\r\n    error instanceof UserRejectedRequestErrorWalletConnect ||\r\n    error instanceof UserRejectedRequestErrorFrame\r\n  ) {\r\n    return 'Please authorize this website to access your Ethereum account.'\r\n  } else {\r\n    console.error(error)\r\n    return 'An unknown error occurred. Check the console for more details.'\r\n  }\r\n}\r\n\r\nfunction getLibrary(provider) {\r\n  const library = new Web3Provider(provider)\r\n  library.pollingInterval = 12000\r\n  return library\r\n}\r\n\r\nfunction Header() {\r\n  const { active, error, chainId, account, library } = useWeb3React()\r\n  const [balance, setBalance] = React.useState();\r\n\r\n  React.useEffect(() => {\r\n    if (!!account && !!library) {\r\n      let stale = false\r\n\r\n      library\r\n        .getBalance(account)\r\n        .then((balance) => {\r\n          if (!stale) {\r\n            setBalance(balance)\r\n          }\r\n        })\r\n        .catch(() => {\r\n          if (!stale) {\r\n            setBalance(null)\r\n          }\r\n        })\r\n\r\n      return () => {\r\n        stale = true\r\n        setBalance(undefined)\r\n      }\r\n    }\r\n  }, [account, library, chainId])\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        Status: {active ? \"you're connected\" : error ? \"There's a problem.\" : \"...\"}\r\n      </Typography>\r\n      <Typography variant=\"body2\" gutterBottom>\r\n        Chain ID: {chainId}\r\n      </Typography>\r\n      <Typography variant=\"body2\" gutterBottom>\r\n        Account: {account === null\r\n          ? '-'\r\n          : account\r\n            ? `${account.substring(0, 6)}...${account.substring(account.length - 4)}`\r\n            : ''}\r\n      </Typography>\r\n      <Typography variant=\"body2\" gutterBottom>\r\n        Balance: {balance === null ? 'Error' : balance ? `Ξ${formatEther(balance)}` : ''}\r\n      </Typography>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  const context = useWeb3React()\r\n  const { connector, library, chainId, account, activate, deactivate, active, error } = context\r\n  const [message, setMessage] = React.useState();\r\n\r\n  // handle logic to recognize the connector currently being activated\r\n  const [activatingConnector, setActivatingConnector] = React.useState()\r\n  React.useEffect(() => {\r\n    if (activatingConnector && activatingConnector === connector) {\r\n      setActivatingConnector(undefined)\r\n    }\r\n  }, [activatingConnector, connector])\r\n\r\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\r\n  const triedEager = useEagerConnect()\r\n\r\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\r\n  useInactiveListener(!triedEager || !!activatingConnector)\r\n\r\n  const setSeed = signature => {\r\n    setMessage(\"Success\");\r\n    window.localStorage.setItem(\"seed\", signature);\r\n    console.log(signature);\r\n  };\r\n  const setSeedCanceled = error => {\r\n    setMessage(\"Error\")\r\n    console.log(error.message);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div\r\n        style={{\r\n          display: 'grid',\r\n          gridGap: '1rem',\r\n          gridTemplateColumns: '1fr 1fr',\r\n          maxWidth: '20rem',\r\n          margin: 'auto'\r\n        }}\r\n      >\r\n        {Object.keys(connectorsByName).map(name => {\r\n          const currentConnector = connectorsByName[name]\r\n          const activating = currentConnector === activatingConnector\r\n          const connected = currentConnector === connector\r\n          const disabled = !triedEager || !!activatingConnector || connected || !!error\r\n\r\n          return (\r\n            <Button color=\"primary\" variant=\"outlined\"\r\n              disabled={disabled}\r\n              key={name}\r\n              onClick={() => {\r\n                setActivatingConnector(currentConnector)\r\n                activate(connectorsByName[name])\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  position: 'absolute',\r\n                  top: '0',\r\n                  left: '0',\r\n                  height: '100%',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  color: 'black',\r\n                  margin: '0 0 0 1rem'\r\n                }}\r\n              >\r\n                {activating && <div>Loading...</div>}\r\n                {connected && (\r\n                  <span role=\"img\" aria-label=\"check\">\r\n                    ✅\r\n                  </span>\r\n                )}\r\n              </div>\r\n              {name}\r\n            </Button>\r\n          )\r\n        })}\r\n      </div>\r\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n        {(active || error) && (\r\n          <Button color=\"primary\" variant=\"outlined\"\r\n            onClick={() => {\r\n              deactivate()\r\n            }}\r\n          >\r\n            Deactivate\r\n          </Button>\r\n        )}\r\n\r\n        {!!error && <h4 style={{ marginTop: '1rem', marginBottom: '0' }}>{getErrorMessage(error)}</h4>}\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          display: 'grid',\r\n          gridGap: '1rem',\r\n          gridTemplateColumns: 'fit-content',\r\n          maxWidth: '20rem',\r\n          margin: 'auto'\r\n        }}\r\n      >\r\n        {!!(library && account) && (\r\n          <>\r\n            <Button color=\"primary\" variant=\"outlined\"\r\n              onClick={() => {\r\n                library\r\n                  .getSigner(account)\r\n                  .signMessage('simonsartworks')\r\n                  .then((signature) => {\r\n                    setSeed(signature);\r\n                  })\r\n                  .catch((error) => {\r\n                    setSeedCanceled(error);\r\n                  })\r\n              }}\r\n            >\r\n              Set signature/seed\r\n          </Button>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              {message}\r\n            </Typography>\r\n          </>\r\n        )}\r\n        {!!(connector === connectorsByName[ConnectorNames.Network] && chainId) && (\r\n          <Button color=\"primary\" variant=\"outlined\"\r\n            onClick={() => {\r\n              ; (connector).changeChainId(chainId === 1 ? 4 : 1)\r\n            }}\r\n          >\r\n            Switch Networks\r\n          </Button>\r\n        )}\r\n        {connector === connectorsByName[ConnectorNames.WalletConnect] && (\r\n          <Button color=\"primary\" variant=\"outlined\"\r\n            onClick={() => {\r\n              ; (connector).close()\r\n            }}\r\n          >\r\n            Kill WalletConnect Session\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Web3 = () => {\r\n  return (\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <App />\r\n    </Web3ReactProvider>\r\n  )\r\n}\r\n\r\nexport default Web3;","import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nimport { injected } from './Connectors'\r\n\r\nexport function useEagerConnect() {\r\n  const { activate, active } = useWeb3React()\r\n\r\n  const [tried, setTried] = useState(false)\r\n\r\n  useEffect(() => {\r\n    injected.isAuthorized().then((isAuthorized) => {\r\n      if (isAuthorized) {\r\n        activate(injected, undefined, true).catch(() => {\r\n          setTried(true)\r\n        })\r\n      } else {\r\n        setTried(true)\r\n      }\r\n    })\r\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\r\n\r\n  // if the connection worked, wait until we get confirmation of that to flip the flag\r\n  useEffect(() => {\r\n    if (!tried && active) {\r\n      setTried(true)\r\n    }\r\n  }, [tried, active])\r\n\r\n  return tried\r\n}\r\n\r\nexport function useInactiveListener(suppress = false) {\r\n  const { active, error, activate } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const { ethereum } = window \r\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\r\n      const handleConnect = () => {\r\n        console.log(\"Handling 'connect' event\")\r\n        activate(injected)\r\n      }\r\n      const handleChainChanged = (chainId) => {\r\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\r\n        activate(injected)\r\n      }\r\n      const handleAccountsChanged = (accounts) => {\r\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\r\n        if (accounts.length > 0) {\r\n          activate(injected)\r\n        }\r\n      }\r\n      const handleNetworkChanged = (networkId) => {\r\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\r\n        activate(injected)\r\n      }\r\n\r\n      ethereum.on('connect', handleConnect)\r\n      ethereum.on('chainChanged', handleChainChanged)\r\n      ethereum.on('accountsChanged', handleAccountsChanged)\r\n      ethereum.on('networkChanged', handleNetworkChanged)\r\n\r\n      return () => {\r\n        if (ethereum.removeListener) {\r\n          ethereum.removeListener('connect', handleConnect)\r\n          ethereum.removeListener('chainChanged', handleChainChanged)\r\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\r\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\r\n        }\r\n      }\r\n    }\r\n  }, [active, error, suppress, activate])\r\n}"],"sourceRoot":""}