{"version":3,"sources":["artworks/A004.js"],"names":["Artwork","props","world","octaveOffsets","generator","CANVAS_WIDTH","window","localStorage","getItem","innerWidth","CANVAS_HEIGHT","innerHeight","SEED","regions","MapGenerator","p5","width","height","noiseScale","octaves","persistance","lacunarity","this","noiseMap","Noise","generateNoiseMap","convertNoiseToTerrainMap","currentHeight","terrainMap","length","y","x","i","push","clr","discretizedHeight","heightMap","floor","color","map","greyscaleMap","round","mapWidth","mapHeight","scale","amplitude","frequency","noiseHeight","sampleX","sampleY","maxNoiseHeight","Infinity","minNoiseHeight","halfWidth","halfHeight","noise","Map","texture","createImage","data","generateMap","indPixels","loadPixels","indData","pixels","red","green","blue","updatePixels","TerrainType","name","setup","canvasParentRef","createCanvas","parent","noiseSeed","random","randomSeed","pixelDensity","offsetX","offsetY","offsets","createVector","generateOctaveOffsets","deepWater","mediumWater","shallowWater","beach","grass","forest","dirt","rock","snow","createRegions","init","createTexture","draw","background","image","keyPressed","keyCode","fileName","location","hash","replace","saveCanvas"],"mappings":"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","file":"static/js/38.6ab00023.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n//import { TerrainType } from \"p5\";\r\n\r\nconst Artwork = (props) => {\r\n  //global constants\r\n  const CANVAS_WIDTH = window.localStorage.getItem(\"customWidth\") ? window.localStorage.getItem(\"customWidth\") : window.innerWidth;\r\n  const CANVAS_HEIGHT = window.localStorage.getItem(\"customHeight\") ? window.localStorage.getItem(\"customHeight\") : window.innerHeight;\r\n  const SEED = window.localStorage.getItem(\"signature\");\r\n  const mode = \"terrain\"; // terrain | height | greyscale\r\n  const noiseScale = 0.01; // range between 0-0.03\r\n  const octaves = 4; // range between 1-5\r\n  const persistance = 0.5; // range between 0-1\r\n  const lacunarity = 2; // range between 1-3\r\n  let regions = [];\r\n  let world, octaveOffsets, generator;\r\n\r\n  class MapGenerator {\r\n    generateMap(p5, width, height, noiseScale, octaves, persistance, lacunarity) {\r\n      this.noiseMap = Noise.generateNoiseMap(p5, width, height, noiseScale, octaves, persistance, lacunarity);\r\n      if (mode === \"terrain\") return MapGenerator.convertNoiseToTerrainMap(this.noiseMap);\r\n      else if (mode === \"height\") return MapGenerator.convertNoiseToHeightMap(p5, this.noiseMap);\r\n      else if (mode === \"greyscale\") return MapGenerator.convertNoiseToGreyscaleMap(p5, this.noiseMap);\r\n    }\r\n    static convertNoiseToTerrainMap(noiseMap) {\r\n      let terrainMap = [];\r\n      let height = noiseMap.length;\r\n      let width = noiseMap[0].length;\r\n      let currentHeight;\r\n      for (let y = 0; y < height; y++) {\r\n        for (let x = 0; x < width; x++) {\r\n          currentHeight = noiseMap[y][x];\r\n          for (let i = 0; i < regions.length; i++) {\r\n            if (currentHeight <= regions[i].height) {\r\n              terrainMap.push(regions[i].clr);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return terrainMap;\r\n    }\r\n    static convertNoiseToHeightMap(p5, noiseMap) {\r\n      let heightMap = [];\r\n      let height = noiseMap.length;\r\n      let width = noiseMap[0].length;\r\n      let currentHeight, discretizedHeight;\r\n      for (let y = 0; y < height; y++) {\r\n        for (let x = 0; x < width; x++) {\r\n          currentHeight = noiseMap[y][x];\r\n          discretizedHeight = p5.floor(currentHeight * 10) / 10;\r\n          heightMap.push(p5.color(p5.map(discretizedHeight, 0, 0.9, 0, 255)));\r\n        }\r\n      }\r\n      return heightMap;\r\n    }\r\n    static convertNoiseToGreyscaleMap(p5, noiseMap) {\r\n      let greyscaleMap = [];\r\n      let height = noiseMap.length;\r\n      let width = noiseMap[0].length;\r\n      let clr;\r\n      for (let y = 0; y < height; y++) {\r\n        for (let x = 0; x < width; x++) {\r\n          clr = p5.color(p5.round(p5.map(noiseMap[y][x], 0, 1, 0, 255)));\r\n          greyscaleMap.push(clr);\r\n        }\r\n      }\r\n      return greyscaleMap;\r\n    }\r\n  }\r\n\r\n  class Noise {\r\n    static generateNoiseMap(p5, mapWidth, mapHeight, scale, octaves, persistance, lacunarity) {\r\n      let noiseMap = [];\r\n      if (scale <= 0) scale = 0.0001;\r\n      let amplitude, frequency, noiseHeight, sampleX, sampleY, perlinValue;\r\n      let maxNoiseHeight = -Infinity;\r\n      let minNoiseHeight = Infinity;\r\n      let halfWidth = mapWidth / 2;\r\n      let halfHeight = mapHeight / 2;\r\n      for (let y = 0; y < mapHeight; y++) {\r\n        noiseMap[y] = [];\r\n        for (let x = 0; x < mapWidth; x++) {\r\n          amplitude = 1;\r\n          frequency = 1;\r\n          noiseHeight = 0;\r\n          for (let i = 0; i < octaves; i++) {\r\n            sampleX = (x - halfWidth) * scale * frequency + octaveOffsets[i].x;\r\n            sampleY = (y - halfHeight) * scale * frequency + octaveOffsets[i].y;\r\n            perlinValue = p5.noise(sampleX, sampleY) * 2 - 1;\r\n            noiseHeight += perlinValue * amplitude;\r\n            amplitude *= persistance;\r\n            frequency *= lacunarity;\r\n          }\r\n          if (noiseHeight < minNoiseHeight) minNoiseHeight = noiseHeight;\r\n          if (noiseHeight > maxNoiseHeight) maxNoiseHeight = noiseHeight;\r\n          noiseMap[y].push(noiseHeight);\r\n        }\r\n      }\r\n      for (let y = 0; y < mapHeight; y++) {\r\n        for (let x = 0; x < mapWidth; x++) {\r\n          noiseMap[y][x] = p5.map(noiseMap[y][x], minNoiseHeight, maxNoiseHeight, 0, 1);\r\n        }\r\n      }\r\n      return noiseMap;\r\n    }\r\n  }\r\n\r\n  class Map {\r\n    constructor(p5, x, y, width, height) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.width = width;\r\n      this.height = height;\r\n      this.texture = p5.createImage(this.width, this.height);\r\n    }\r\n    init(p5) {\r\n      this.noiseScale = noiseScale;\r\n      this.octaves = octaves;\r\n      this.persistance = persistance;\r\n      this.lacunarity = lacunarity;\r\n      this.data = generator.generateMap(p5, this.width, this.height, this.noiseScale, this.octaves, this.persistance, this.lacunarity);\r\n    }\r\n    createTexture(p5) {\r\n      this.texture.loadPixels();\r\n      let indPixels;\r\n      let indData = 0;\r\n      for (let y = 0; y < this.height; y++) {\r\n        for (let x = 0; x < this.width; x++) {\r\n          indPixels = (y * this.width + x) * 4;\r\n          this.texture.pixels[indPixels + 0] = p5.red(this.data[indData]);\r\n          this.texture.pixels[indPixels + 1] = p5.green(this.data[indData]);\r\n          this.texture.pixels[indPixels + 2] = p5.blue(this.data[indData]);\r\n          this.texture.pixels[indPixels + 3] = 255;\r\n          indData++;\r\n        }\r\n      }\r\n      this.texture.updatePixels();\r\n    }\r\n  }\r\n\r\n  class TerrainType {\r\n    constructor(name, height, color) {\r\n      this.name = name;\r\n      this.height = height;\r\n      this.clr = color;\r\n    }\r\n  }\r\n\r\n  function generateOctaveOffsets(p5) {\r\n    let offsets = [];\r\n    let offsetX, offsetY;\r\n    for (let i = 0; i < 10; i++) {\r\n      offsetX = p5.random(-100000, 100000);\r\n      offsetY = p5.random(-100000, 100000);\r\n      offsets.push(p5.createVector(offsetX, offsetY));\r\n    }\r\n    return offsets;\r\n  }\r\n\r\n  function createRegions(p5) {\r\n    const deepWater = new TerrainType(\"deep water\", 0.1, p5.color(97, 176, 221));\r\n    regions.push(deepWater);\r\n    const mediumWater = new TerrainType(\"medium water\", 0.3, p5.color(162, 203, 229));\r\n    regions.push(mediumWater);\r\n    const shallowWater = new TerrainType(\"shallow water\", 0.5, p5.color(214, 231, 249));\r\n    regions.push(shallowWater);\r\n    const beach = new TerrainType(\"beach\", 0.55, p5.color(241, 243, 242));\r\n    regions.push(beach);\r\n    const grass = new TerrainType(\"grass\", 0.67, p5.color(189, 220, 178));\r\n    regions.push(grass);\r\n    const forest = new TerrainType(\"forest\", 0.75, p5.color(160, 188, 145));\r\n    regions.push(forest);\r\n    const dirt = new TerrainType(\"dirt\", 0.82, p5.color(181, 170, 162));\r\n    regions.push(dirt);\r\n    const rock = new TerrainType(\"rock\", 0.95, p5.color(137, 129, 123));\r\n    regions.push(rock);\r\n    const snow = new TerrainType(\"snow\", 1, p5.color(255));\r\n    regions.push(snow);\r\n    return regions;\r\n  }\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    p5.createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT).parent(canvasParentRef);\r\n    p5.noiseSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n    p5.randomSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n    p5.pixelDensity(1);\r\n    octaveOffsets = generateOctaveOffsets(p5);\r\n    regions = createRegions(p5);\r\n    generator = new MapGenerator();\r\n    world = new Map(p5, 0, 0, p5.width, p5.height);\r\n    world.init(p5);\r\n    world.createTexture(p5);\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    p5.background(0);\r\n    p5.image(world.texture, world.x, world.y);\r\n  };\r\n\r\n  const keyPressed = (p5) => {\r\n    //save the canvas when press \"s\" or space\r\n    if (p5.keyCode === 83 || p5.keyCode === 32) {\r\n      let fileName = \"SimonBuechi\" + window.location.hash;\r\n      fileName.replace(/[^a-zA-Z0-9]/g, \"\");\r\n      p5.saveCanvas(fileName, \"jpg\");\r\n    }\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} keyPressed={keyPressed} />;\r\n};\r\n\r\nexport default Artwork;"],"sourceRoot":""}