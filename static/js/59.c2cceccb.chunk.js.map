{"version":3,"sources":["artworks/A027.js"],"names":["Artwork","props","color1","color2","color3","treeColor","CANVAS_WIDTH","window","localStorage","getItem","innerWidth","CANVAS_HEIGHT","innerHeight","SEED","branch","p5","x","y","ang","len","d","x2","y2","cos","sin","noStroke","fill","ellipse","height","strtx","strty","finx","finy","sw","fraction","divBy","x1","y1","stroke","noFill","strokeWeight","beginShape","j","randomGaussian","vertex","endShape","drawLine","random","setup","canvasParentRef","createCanvas","parent","noiseSeed","floor","randomSeed","noLoop","colorMode","HSB","baseHue","color","setAlpha","COLOR_RANGE","draw","background","i","width","rect","drawBackground","min","keyPressed","keyCode","fileName","location","hash","replace","saveCanvas","key","refresh"],"mappings":"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","file":"static/js/59.c2cceccb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\n// see https://openprocessing.org/sketch/383911 for further optimization\r\n\r\nconst Artwork = (props) => {\r\n  //global constants\r\n  const CANVAS_WIDTH = window.localStorage.getItem(\"customWidth\") ? window.localStorage.getItem(\"customWidth\") : window.innerWidth;\r\n  const CANVAS_HEIGHT = window.localStorage.getItem(\"customHeight\") ? window.localStorage.getItem(\"customHeight\") : window.innerHeight;\r\n  const SEED = window.localStorage.getItem(\"signature\");\r\n  const BRANCH_DEPTH = 15;\r\n  const COLOR_RANGE = 60;\r\n  const COLOR_ALPHA = 0.2;\r\n  let color1, color2, color3, treeColor;\r\n\r\n  function branch(p5, x, y, ang, len, d) {\r\n    let x2 = x;\r\n    let y2 = y;\r\n    x += p5.cos(ang) * len;\r\n    y += p5.sin(ang) * len;\r\n  \r\n    if (d === 1) {\r\n      p5.noStroke();\r\n      if (len > 7) {\r\n        p5.fill(color1);\r\n      } else if ( len > 4) {\r\n        p5.fill(color2);\r\n      } else {\r\n        p5.fill(color3);\r\n      }\r\n      p5.ellipse(x2, y2, p5.height/150, p5.height/150);\r\n    } else {\r\n      drawLine(p5, x2, y2, x, y, len);\r\n    }\r\n  \r\n    len *= p5.random(0.7, 0.94);\r\n    d--;\r\n    if (d > 0) {\r\n      branch(p5, x, y, ang - p5.random(0.2, 0.6), len, d);\r\n      branch(p5, x, y, ang + p5.random(0.2, 0.6), len, d);\r\n    }\r\n  }\r\n  \r\n  \r\n  function drawLine(p5, strtx, strty, finx, finy, sw) { \r\n    let numSegs = 15;\r\n    let fraction = 0;\r\n    let  divBy = numSegs;\r\n    let x1 = strtx;\r\n    let y1 = strty;\r\n    p5.stroke(treeColor);\r\n    p5.noFill();\r\n    p5.strokeWeight(sw * 0.05); \r\n    p5.beginShape();\r\n    for (let j = 0; j <= numSegs; j++) {\r\n      let x = (p5.randomGaussian()*.3) + x1 + (fraction * (finx-x1));\r\n      let y = (p5.randomGaussian()*.3) + y1 + (fraction * (finy-y1));\r\n      p5.vertex(x, y);\r\n      x1 = x;\r\n      y1 = y;\r\n      fraction = 1.0/divBy--;\r\n    }\r\n    p5.endShape();\r\n  }\r\n  \r\n  function drawBackground(p5) {\r\n    p5.noStroke();\r\n    for (let i = 0; i<p5.width; i+=2) {\r\n      for (let j = 0; j<p5.height; j+=2) {\r\n        p5.fill(p5.random(95,100));\r\n        p5.rect(i, j, 2, 2);\r\n      }\r\n    }\r\n    for (let i = 0; i<100; i++) {\r\n      p5.fill(p5.random(70,90));\r\n      p5.ellipse(p5.random(0, p5.width), p5.random(0, p5.height), p5.random(1, 3), p5.random(1, 3));\r\n    }\r\n  }\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    //setup canvas & basics\r\n    p5.createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT).parent(canvasParentRef);\r\n    p5.noiseSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n    p5.randomSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n    p5.noLoop();\r\n    p5.colorMode(p5.HSB,360, 100, 100);\r\n    const baseHue = p5.floor(p5.random(0,360));\r\n    color1 = p5.color(baseHue, p5.floor(p5.random(70,100)), p5.floor(p5.random(70,100)));\r\n    color1.setAlpha(COLOR_ALPHA);\r\n    color2 = p5.color((baseHue + COLOR_RANGE) % 360, p5.floor(p5.random(70,100)), p5.floor(p5.random(70,100)));\r\n    color2.setAlpha(COLOR_ALPHA);\r\n    color3 = p5.color((baseHue + COLOR_RANGE * 2) % 360, p5.floor(p5.random(70,100)), p5.floor(p5.random(70,100)));\r\n    color2.setAlpha(COLOR_ALPHA);\r\n    treeColor = p5.color(p5.floor(p5.random(10,40)), p5.floor(p5.random(10,100)), p5.floor(p5.random(30,60)));\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    p5.background(255);\r\n    drawBackground(p5);\r\n    // startX, startY, initial angle, initial branch (trunk) length, recursion control\r\n    branch(p5, p5.width/2, p5.height-100, -p5.random(1.4, 1.74), p5.min(p5.height, p5.width) * 0.12 , BRANCH_DEPTH);\r\n    p5.noFill();\r\n    p5.stroke(180);\r\n    p5.strokeWeight(1);\r\n    p5.rect(0, 0, p5.width-1, p5.height-1);\r\n  };\r\n\r\n  const keyPressed = (p5) => {\r\n    //save the canvas when press \"s\" or space\r\n    if (p5.keyCode === 83 || p5.keyCode === 32) {\r\n      let fileName = \"SimonBuechi\" + window.location.hash;\r\n      fileName.replace(/[^a-zA-Z0-9]/g, \"\");\r\n      p5.saveCanvas(fileName, \"jpg\");\r\n    }\r\n    if (p5.key === 'r') {\r\n      p5.refresh();\r\n    }\r\n  };\r\n\r\n/*\r\n      PVector source = new PVector(mouseX, mouseY);\r\n      \r\n      let branchDistThreshold = 300*300;\r\n      \r\n      for (Branch branch : branches) {\r\n        let distance = distSquared(mouseX, mouseY, branch.end.x, branch.end.y);\r\n        if (distance > branchDistThreshold) {\r\n          continue;\r\n        }\r\n        \r\n        PVector explosion = new PVector(branch.end.x, branch.end.y);\r\n        explosion.sub(source);\r\n        explosion.normalize();\r\n        //let mult = map(distance, 0, branchDistThreshold, 10.0, 1.0); // java mode\r\n        let mult = map(distance, 0, branchDistThreshold, 6.0, 1.0); // js mode\r\n        explosion.mult(mult);\r\n        branch.applyForce(explosion);\r\n      }\r\n      \r\n      let leafDistThreshold = 50*50;\r\n      \r\n      for (Leaf leaf : leaves) {\r\n        let distance = distSquared(mouseX, mouseY, leaf.pos.x, leaf.pos.y);\r\n        if (distance > leafDistThreshold) {\r\n          continue;\r\n        }\r\n        \r\n        PVector explosion = new PVector(leaf.pos.x, leaf.pos.y);\r\n        explosion.sub(source);\r\n        explosion.normalize();\r\n        let mult = map(distance, 0, leafDistThreshold, 2.0, 0.1);\r\n        mult *= random(0.8, 1.2); // Explosion looks too spherical otherwise, this helps give it variation\r\n        explosion.mult(mult);\r\n        leaf.applyForce(explosion);\r\n        \r\n        leaf.dynamic = true;\r\n      }\r\n    */\r\n\r\n\r\n  return <Sketch setup={setup} draw={draw} keyPressed={keyPressed} />;\r\n};\r\n\r\nexport default Artwork;"],"sourceRoot":""}