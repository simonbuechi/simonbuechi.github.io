{"version":3,"sources":["artworks/A015.js"],"names":["Artwork","props","CANVAS_WIDTH","window","localStorage","getItem","innerWidth","CANVAS_HEIGHT","innerHeight","SEED","colors","i","noiseCurve","p5","x","y","noFill","beginShape","angle","noise","vertex","cos","sin","endShape","setup","canvasParentRef","createCanvas","parent","noiseSeed","floor","random","randomSeed","colorMode","HSB","background","color","noStroke","Math","max","width","height","step","gradient","lerpColor","BACKGROUND_BRIGHTNESS","fill","ellipse","baseHue","draw","translate","scale","map","col","length","stroke","line","setAlpha","noLoop","keyPressed","keyCode","saveCanvas"],"mappings":"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","file":"static/js/48.8a584718.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nconst Artwork = (props) => {\r\n  //global constants\r\n  const CANVAS_WIDTH = window.localStorage.getItem(\"customWidth\") ? window.localStorage.getItem(\"customWidth\") : window.innerWidth;\r\n  const CANVAS_HEIGHT = window.localStorage.getItem(\"customHeight\") ? window.localStorage.getItem(\"customHeight\") : window.innerHeight;\r\n  const SEED = window.localStorage.getItem(\"signature\");\r\n  const LINES = 9;\r\n  const STRIPES = 250;\r\n  const OPACITY = 0.1;\r\n  const BACKGROUND_HUE = 360;\r\n  const BACKGROUND_SATURATION = 50;\r\n  const BACKGROUND_BRIGHTNESS = 5;\r\n  const BACKGROUND_BRIGHTNESS_LIGHTEN = 15;\r\n  const COLOR_VARIANCE = 40;\r\n  const COLOR_BRIGHTNESS_MIN = 95;\r\n  const COLOR_BRIGHTNESS_MAX = 99;\r\n  const COLOR_SATURATION_MIN = 30;\r\n  const COLOR_SATURATION_MAX = 50;\r\n  //global variables\r\n  let colors = [];\r\n  let i = 0;\r\n\r\n  function noiseCurve(p5, x, y) {\r\n    p5.noFill();\r\n    p5.beginShape();\r\n    for (let i = 0; i < STRIPES; i++) {\r\n      let scl = 0.0003;\r\n      let angle = p5.noise(x * scl, y * scl, i * 0.0002) * 160;\r\n      p5.vertex(x, y);\r\n      x += p5.cos(angle) * 3;\r\n      y += p5.sin(angle) * 3;\r\n    }\r\n    p5.endShape();\r\n  }\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    //setup canvas & basics\r\n    p5.createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT).parent(canvasParentRef);\r\n    p5.noiseSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n    p5.randomSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n    p5.colorMode(p5.HSB, 360, 100, 100);\r\n    //set background\r\n    p5.background(p5.color(BACKGROUND_HUE, BACKGROUND_SATURATION, BACKGROUND_BRIGHTNESS));\r\n    p5.noStroke();\r\n    for (let i = Math.max(p5.width, p5.height); i > 0; i--) {\r\n      const step = i / Math.max(p5.width, p5.height);\r\n      const gradient = p5.lerpColor(\r\n        p5.color(BACKGROUND_HUE, BACKGROUND_SATURATION, BACKGROUND_BRIGHTNESS + BACKGROUND_BRIGHTNESS_LIGHTEN),\r\n        p5.color(BACKGROUND_HUE, BACKGROUND_SATURATION, BACKGROUND_BRIGHTNESS),\r\n        step\r\n      );\r\n      p5.fill(gradient);\r\n      p5.ellipse(p5.width / 2, p5.height / 2, step * p5.width, step * p5.height);\r\n    }\r\n    //setup color scheme\r\n    const baseHue = p5.floor(p5.noise(1) * 360);\r\n    colors = [\r\n      p5.color(\r\n        baseHue,\r\n        p5.floor(p5.random() * (COLOR_SATURATION_MAX - COLOR_SATURATION_MIN) + COLOR_SATURATION_MIN),\r\n        p5.floor(p5.random() * (COLOR_BRIGHTNESS_MAX - COLOR_BRIGHTNESS_MIN) + COLOR_BRIGHTNESS_MIN)\r\n      ),\r\n      p5.color(\r\n        baseHue + p5.floor(1 * COLOR_VARIANCE),\r\n        p5.floor(p5.random() * (COLOR_SATURATION_MAX - COLOR_SATURATION_MIN) + COLOR_SATURATION_MIN),\r\n        p5.floor(p5.random() * (COLOR_BRIGHTNESS_MAX - COLOR_BRIGHTNESS_MIN) + COLOR_BRIGHTNESS_MIN)\r\n      ),\r\n      p5.color(\r\n        baseHue + p5.floor(2 * COLOR_VARIANCE),\r\n        p5.floor(p5.random() * (COLOR_SATURATION_MAX - COLOR_SATURATION_MIN) + COLOR_SATURATION_MIN),\r\n        p5.floor(p5.random() * (COLOR_BRIGHTNESS_MAX - COLOR_BRIGHTNESS_MIN) + COLOR_BRIGHTNESS_MIN)\r\n      ),\r\n      p5.color(\r\n        baseHue + p5.floor(3 * COLOR_VARIANCE),\r\n        p5.floor(p5.random() * (COLOR_SATURATION_MAX - COLOR_SATURATION_MIN) + COLOR_SATURATION_MIN),\r\n        p5.floor(p5.random() * (COLOR_BRIGHTNESS_MAX - COLOR_BRIGHTNESS_MIN) + COLOR_BRIGHTNESS_MIN)\r\n      ),\r\n      p5.color(\r\n        baseHue + p5.floor(4 * COLOR_VARIANCE),\r\n        p5.floor(p5.random() * (COLOR_SATURATION_MAX - COLOR_SATURATION_MIN) + COLOR_SATURATION_MIN),\r\n        p5.floor(p5.random() * (COLOR_BRIGHTNESS_MAX - COLOR_BRIGHTNESS_MIN) + COLOR_BRIGHTNESS_MIN)\r\n      ),\r\n    ];\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    p5.translate(p5.width / 2, p5.height / 2);\r\n    p5.scale(0.55);\r\n    p5.translate(-p5.width / 2, -p5.height / 2);\r\n    let y = p5.map(i, 0, LINES, 0, p5.height);\r\n    //let col = p5.color(colors[i % colors.length]);\r\n    let col = p5.color(colors[p5.floor(p5.random(0, colors.length))]);\r\n    p5.stroke(col);\r\n    p5.line(0, y, p5.width, y);\r\n    col.setAlpha(OPACITY);\r\n    p5.stroke(col);\r\n    for (let x = 0; x < p5.width; x++) {\r\n      noiseCurve(p5, x, y);\r\n    }\r\n    i += 1;\r\n    if (i >= LINES) {\r\n      p5.noLoop();\r\n    }\r\n  };\r\n\r\n  const keyPressed = (p5) => {\r\n    //save the canvas when press \"s\" or space\r\n    if (p5.keyCode === 83 || p5.keyCode === 32) {\r\n      p5.saveCanvas(\"simons_artwork\", \"jpg\");\r\n    }\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} keyPressed={keyPressed} />;\r\n};\r\n\r\nexport default Artwork;"],"sourceRoot":""}