{"version":3,"sources":["artworks/A001.js"],"names":["Artwork","props","colors","CANVAS_WIDTH","document","documentElement","clientWidth","CAVNAS_HEIGHT","clientHeight","seed","window","localStorage","getItem","offset","setup","p5","canvasParentRef","createCanvas","parent","background","colorMode","HSB","strokeWeight","stroke","noiseSeed","floor","random","randomSeed","baseHue","noise","color","draw","i","width","r","max","fill","length","rect","height","noLoop","keyPressed","keyCode","saveCanvas"],"mappings":"oHAAA,6CAuGeA,UApGC,SAACC,GAEf,IAWIC,EAXEC,EAAeC,SAASC,gBAAgBC,YACxCC,EAAgBH,SAASC,gBAAgBG,aACzCC,EAAOC,OAAOC,aAAaC,QAAQ,aAQrCC,EAAS,EAqFb,OAAO,kBAAC,IAAD,CAAQC,MA5ED,SAACC,EAAIC,GAEjBD,EAAGE,aAAad,EAAcI,GAAeW,OAAOF,GACpDD,EAAGI,WAAW,KACdJ,EAAGK,UAAUL,EAAGM,IAAK,IAAK,IAAK,KAC/BN,EAAGO,aAAa,GAChBP,EAAGQ,OAAO,EAAG,EAAG,KAChBR,EAAGS,UAAmB,OAATf,EAAgBA,EAAOM,EAAGU,MAAMV,EAAGW,OAAO,EAAG,OAC1DX,EAAGY,WAAoB,OAATlB,EAAgBA,EAAOM,EAAGU,MAAMV,EAAGW,OAAO,EAAG,OAE3D,IAAME,EAAUb,EAAGU,MAAoB,IAAdV,EAAGc,MAAM,IAClC3B,EAAS,CACPa,EAAGe,MACDF,EACAb,EAAGU,MAAM,GAAAV,EAAGW,SA3BW,IA4BvBX,EAAGU,MAAM,GAAAV,EAAGW,SA9BW,KAgCzBX,EAAGe,MACDF,EAAUb,EAAGU,MAAoB,EAAdV,EAAGW,SAlCL,IAmCjBX,EAAGU,MAAM,GAAAV,EAAGW,SAhCW,IAiCvBX,EAAGU,MAAM,GAAAV,EAAGW,SAnCW,KAqCzBX,EAAGe,MACDF,EAAUb,EAAGU,MAAoB,EAAdV,EAAGW,SAvCL,IAwCjBX,EAAGU,MAAM,GAAAV,EAAGW,SArCW,IAsCvBX,EAAGU,MAAM,GAAAV,EAAGW,SAxCW,KA0CzBX,EAAGe,MACDF,EAAUb,EAAGU,MAAoB,EAAdV,EAAGW,SA5CL,IA6CjBX,EAAGU,MAAM,GAAAV,EAAGW,SA1CW,IA2CvBX,EAAGU,MAAM,GAAAV,EAAGW,SA7CW,KA+CzBX,EAAGe,MACDF,EAAUb,EAAGU,MAAoB,EAAdV,EAAGW,SAjDL,IAkDjBX,EAAGU,MAAM,GAAAV,EAAGW,SA/CW,IAgDvBX,EAAGU,MAAM,GAAAV,EAAGW,SAlDW,OA2FAK,KAnBhB,SAAChB,GAEZ,IAAK,IAAIiB,EAAI,EAAGnB,EAASE,EAAGkB,MAAOD,IAAK,CAEtC,IAAIE,EAAInB,EAAGoB,IAAIpB,EAAGW,SAAWX,EAAGkB,MAAjB,IAxEI,GAyEnBpB,GAAkBqB,EAClBnB,EAAGqB,KAAKlC,EAAO8B,EAAI9B,EAAOmC,SAC1BtB,EAAGuB,KAAKzB,EAASqB,EAAG,EAAGrB,EAAQE,EAAGwB,QAEpCxB,EAAGyB,UAUoCC,WAPtB,SAAC1B,GAEC,KAAfA,EAAG2B,SAAiC,KAAf3B,EAAG2B,SAC1B3B,EAAG4B,WAAW,iBAAkB","file":"static/js/35.18df2a0c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nconst Artwork = (props) => {\r\n  //global constants\r\n  const CANVAS_WIDTH = document.documentElement.clientWidth;\r\n  const CAVNAS_HEIGHT = document.documentElement.clientHeight;\r\n  const seed = window.localStorage.getItem(\"signature\");\r\n  const COLOR_VARIANCE = 40;\r\n  const COLOR_BRIGHTNESS_MIN = 40;\r\n  const COLOR_BRIGHTNESS_MAX = 90;\r\n  const COLOR_SATURATION_MIN = 30;\r\n  const COLOR_SATURATION_MAX = 90;\r\n  const BAR_LENGTH_MIN = 5;\r\n  const BAR_AMOUNT = 25;\r\n  let offset = 0;\r\n  let colors;\r\n  /*\r\n  function normDist(u = 0, v = 0) {\r\n    while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n    while (v === 0) v = Math.random();\r\n    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n  }\r\n*/\r\n  const setup = (p5, canvasParentRef) => {\r\n    //setup canvas\r\n    p5.createCanvas(CANVAS_WIDTH, CAVNAS_HEIGHT).parent(canvasParentRef);\r\n    p5.background(255);\r\n    p5.colorMode(p5.HSB, 360, 100, 100);\r\n    p5.strokeWeight(0);\r\n    p5.stroke(0, 0, 100);\r\n    p5.noiseSeed(seed !== null ? seed : p5.floor(p5.random(1, 10000)));\r\n    p5.randomSeed(seed !== null ? seed : p5.floor(p5.random(1, 10000)));\r\n    //generate color scheme\r\n    const baseHue = p5.floor(p5.noise(1) * 360);\r\n    colors = [\r\n      p5.color(\r\n        baseHue,\r\n        p5.floor(p5.random() * (COLOR_SATURATION_MAX - COLOR_SATURATION_MIN) + COLOR_SATURATION_MIN),\r\n        p5.floor(p5.random() * (COLOR_BRIGHTNESS_MAX - COLOR_BRIGHTNESS_MIN) + COLOR_BRIGHTNESS_MIN)\r\n      ),\r\n      p5.color(\r\n        baseHue + p5.floor(p5.random() * 1 * COLOR_VARIANCE),\r\n        p5.floor(p5.random() * (COLOR_SATURATION_MAX - COLOR_SATURATION_MIN) + COLOR_SATURATION_MIN),\r\n        p5.floor(p5.random() * (COLOR_BRIGHTNESS_MAX - COLOR_BRIGHTNESS_MIN) + COLOR_BRIGHTNESS_MIN)\r\n      ),\r\n      p5.color(\r\n        baseHue + p5.floor(p5.random() * 2 * COLOR_VARIANCE),\r\n        p5.floor(p5.random() * (COLOR_SATURATION_MAX - COLOR_SATURATION_MIN) + COLOR_SATURATION_MIN),\r\n        p5.floor(p5.random() * (COLOR_BRIGHTNESS_MAX - COLOR_BRIGHTNESS_MIN) + COLOR_BRIGHTNESS_MIN)\r\n      ),\r\n      p5.color(\r\n        baseHue + p5.floor(p5.random() * 3 * COLOR_VARIANCE),\r\n        p5.floor(p5.random() * (COLOR_SATURATION_MAX - COLOR_SATURATION_MIN) + COLOR_SATURATION_MIN),\r\n        p5.floor(p5.random() * (COLOR_BRIGHTNESS_MAX - COLOR_BRIGHTNESS_MIN) + COLOR_BRIGHTNESS_MIN)\r\n      ),\r\n      p5.color(\r\n        baseHue + p5.floor(p5.random() * 4 * COLOR_VARIANCE),\r\n        p5.floor(p5.random() * (COLOR_SATURATION_MAX - COLOR_SATURATION_MIN) + COLOR_SATURATION_MIN),\r\n        p5.floor(p5.random() * (COLOR_BRIGHTNESS_MAX - COLOR_BRIGHTNESS_MIN) + COLOR_BRIGHTNESS_MIN)\r\n      ),\r\n    ];\r\n    /*\r\n    colors[0].hue = p5.floor(p5.noise(seed !== 0 ? 0.5 : Math.random() * 100) * 360);\r\n    colors[0].saturation = p5.floor(p5.noise(0.2) * (95 - 70) + 70);\r\n    colors[0].brightness = 50; // p5.floor(p5.noise(0.3) * (85-50) + 50);\r\n    colors[1].hue = colors[0].hue;\r\n    colors[1].saturation = p5.floor(colors[0].saturation * 0.7);\r\n    colors[1].brightness = p5.floor(colors[0].brightness * 1.5);\r\n    colors[2].hue = colors[0].hue + COLOR_DIFF > 360 ? colors[0].hue + COLOR_DIFF - 360 : colors[0].hue + COLOR_DIFF;\r\n    colors[2].saturation = p5.floor(p5.noise(0.2) * (95 - 70) + 70);\r\n    colors[2].brightness = 50; // p5.floor(p5.noise(0.3) * (85-50) + 50);\r\n    colors[3].hue = colors[2].hue;\r\n    colors[3].saturation = p5.floor(colors[2].saturation * 0.7);\r\n    colors[3].brightness = p5.floor(colors[2].brightness * 1.5);\r\n    colors[4].hue = colors[0].hue + 2 * COLOR_DIFF > 360 ? colors[0].hue + 2 * COLOR_DIFF - 360 : colors[0].hue + 2 * COLOR_DIFF;\r\n    colors[4].saturation = p5.floor(p5.noise(0.2) * (95 - 70) + 70);\r\n    colors[4].brightness = p5.floor(p5.noise(0.3) * (85 - 50) + 50);\r\n    */\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    //loop to draw rectangles\r\n    for (let i = 0; offset < p5.width; i++) {\r\n      // let r = p5.floor(p5.noise(xoff) * 200);\r\n      let r = p5.max(p5.random() * p5.width * (1 / BAR_AMOUNT), BAR_LENGTH_MIN);\r\n      offset = offset + r;\r\n      p5.fill(colors[i % colors.length]);\r\n      p5.rect(offset - r, 0, offset, p5.height);\r\n    }\r\n    p5.noLoop();\r\n  };\r\n\r\n  const keyPressed = (p5) => {\r\n    //save the canvas when press \"s\" or space\r\n    if (p5.keyCode === 83 || p5.keyCode === 32) {\r\n      p5.saveCanvas(\"simons_artwork\", \"jpg\");\r\n    }\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} keyPressed={keyPressed} />;\r\n};\r\n\r\nexport default Artwork;"],"sourceRoot":""}