{"version":3,"sources":["artworks/A017.js"],"names":["Artwork","props","symmetrieNumber","CANVAS_WIDTH","window","localStorage","getItem","innerWidth","CANVAS_HEIGHT","innerHeight","SEED","name","seed","a","uniqueNamesGenerator","dictionaries","adjectives","colors","names","style","length","separator","console","log","generateBranch","p5","origin","angle","randomAngle","random","PI","push","translate","x","y","rotate","createVector","stroke","strokeWeight","line","pop","setup","canvasParentRef","createCanvas","parent","noiseSeed","floor","randomSeed","colorMode","HSB","background","color","iterations","width","height","noFill","i","x1","y1","theta","segmentLength","x2","cos","y2","sin","r","ellipse","draw","radius","min","TWO_PI","textSize","fill","textAlign","CENTER","TOP","generateName","text","noLoop","keyPressed","keyCode","fileName","location","hash","replace","saveCanvas","preload"],"mappings":"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","file":"static/js/50.ec0fd84f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport { uniqueNamesGenerator, adjectives, colors, names } from \"unique-names-generator\";\r\n\r\nconst Artwork = (props) => {\r\n  //global constants\r\n  const CANVAS_WIDTH = window.localStorage.getItem(\"customWidth\") ? window.localStorage.getItem(\"customWidth\") : window.innerWidth;\r\n  const CANVAS_HEIGHT = window.localStorage.getItem(\"customHeight\") ? window.localStorage.getItem(\"customHeight\") : window.innerHeight;\r\n  const SEED = window.localStorage.getItem(\"signature\");\r\n  const PAPER_DENSITY = 5;\r\n  let symmetrieNumber; //how many arms\r\n  let angleVarianzPIDivider = 1; //PI is divided by this number to define the variance in branching angles\r\n  let endLength = 2; //length of the branch at which recursions stops\r\n  let thickness = 1; //thicknes of the lines\r\n  let thicknesIsLengthDependent = false; //is the stroke thicknes dependent on the lenght of the branch?\r\n  let thicknesFactor = 0.008; //if the stroke thicknes is dependent on the lenght of the branch, this is multiplied with the length which is multiplied with the thickness\r\n  let strokeAlpha = 0.25; //alpha of the lines\r\n  let name = \"generating...\";\r\n  //let fontRegular;\r\n\r\n  async function generateName(seed) {\r\n    name = uniqueNamesGenerator({\r\n      dictionaries: [adjectives, colors, names],\r\n      style: \"capital\",\r\n      length: 3,\r\n      seed: seed,\r\n      separator: \" \",\r\n    });\r\n    console.log(name);\r\n  }\r\n\r\n  function generateBranch(p5, origin, length, angle) {\r\n    if (length < endLength) {\r\n      return;\r\n    }\r\n    let randomAngle = p5.random(0, p5.PI / angleVarianzPIDivider);\r\n    p5.push();\r\n    p5.translate(origin.x, origin.y);\r\n    p5.rotate(angle);\r\n    generateBranch(p5, p5.createVector(0, 0), length / 2, 0);\r\n    generateBranch(p5, p5.createVector(length, 0), length / 2, 0);\r\n    generateBranch(p5, p5.createVector(length / 2, 0), length / 2, -randomAngle);\r\n    generateBranch(p5, p5.createVector(length / 2, 0), length / 2, randomAngle);\r\n    p5.stroke(255, strokeAlpha);\r\n    p5.strokeWeight(thicknesIsLengthDependent ? thickness * (length * thicknesFactor) : thickness);\r\n    p5.line(0, 0, length, 0);\r\n    p5.pop();\r\n  }\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    //setup canvas & basics\r\n    p5.createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT).parent(canvasParentRef);\r\n    p5.noiseSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n    p5.randomSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n    p5.colorMode(p5.HSB, 360, 100, 100);\r\n    symmetrieNumber = p5.floor(p5.random(4, 13));\r\n\r\n    //set background\r\n    p5.background(p5.color(40, 40, 40));\r\n\r\n    //make background paper-like\r\n    const iterations = ((p5.width * p5.height) / 100) * PAPER_DENSITY;\r\n    p5.noFill();\r\n    for (let i = 0; i < iterations; i++) {\r\n      p5.stroke(40, 40 + p5.random() * 10, 40 + p5.random() * 5);\r\n\r\n      let x1 = p5.random() * p5.width;\r\n      let y1 = p5.random() * p5.height;\r\n      let theta = p5.random() * 2 * p5.PI;\r\n      let segmentLength = p5.random() * 5 + 2;\r\n      let x2 = p5.cos(theta) * segmentLength + x1;\r\n      let y2 = p5.sin(theta) * segmentLength + y1;\r\n      p5.line(x1, y1, x2, y2);\r\n\r\n      let x = p5.random() * p5.width;\r\n      let y = p5.random() * p5.height;\r\n      let r = p5.floor(p5.random() * 4);\r\n      p5.ellipse(x, y, r, r);\r\n    }\r\n    /*\r\n    //set background gradient\r\n    p5.noStroke();\r\n    for (let i = Math.max(p5.width, p5.height); i > 0; i--) {\r\n      const step = i / Math.max(p5.width, p5.height);\r\n      const gradient = p5.lerpColor(p5.color(40, 40, 20), p5.color(40, 40, 40), step);\r\n      p5.fill(gradient);\r\n      p5.ellipse(p5.width / 2, p5.height / 2, step * p5.width, step * p5.height);\r\n    }\r\n    */\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    const radius = p5.floor(p5.min(p5.width, p5.height) / 5);\r\n    for (let i = 0; i < symmetrieNumber; ++i) {\r\n      generateBranch(p5, p5.createVector(p5.width / 2, p5.height / 2), radius, (p5.TWO_PI / symmetrieNumber) * i);\r\n    }\r\n    p5.textSize(32);\r\n    p5.fill(255);\r\n    //  p5.stroke(255);\r\n    //p5.textFont(fontRegular);\r\n    p5.textAlign(p5.CENTER, p5.TOP);\r\n    generateName(p5.random(1, 100000));\r\n    p5.text(name, p5.width / 2, p5.height - 70);\r\n    p5.noLoop();\r\n  };\r\n\r\n  const keyPressed = (p5) => {\r\n    //save the canvas when press \"s\" or space\r\n    if (p5.keyCode === 83 || p5.keyCode === 32) {\r\n      let fileName = \"SimonBuechi\" + window.location.hash;\r\n      fileName.replace(/[^a-zA-Z0-9]/g, \"\");\r\n      p5.saveCanvas(fileName, \"jpg\");\r\n    }\r\n  };\r\n\r\n  const preload = (p5) => {\r\n    //  fontRegular = p5.loadFont(\"Kalam-Regular.ttf\");\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} keyPressed={keyPressed} preload={preload} />;\r\n};\r\n\r\nexport default Artwork;"],"sourceRoot":""}