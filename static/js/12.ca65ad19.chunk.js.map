{"version":3,"sources":["structure/CopyButton.js","structure/QrCode.js","pages/About.js"],"names":["CopyButton","state","success","handleCopyClick","setState","timer","setTimeout","this","props","t","text","Tooltip","title","aria-label","onCopy","IconButton","Component","withTranslation","QrCode","dialogQr","handleDialogQrOpen","handleDialogQrClose","Fragment","onClick","Dialog","onClose","aria-labelledby","open","DialogContent","Typography","variant","gutterBottom","value","size","bgColor","fgColor","DialogActions","Button","color","autoFocus","About","myCryptos","primary","secondary","config","ethereumAddress","link","icon","bitcoinAddress","myLinks","Grid","container","direction","justify","alignItems","spacing","item","xs","md","Box","my","href","List","dense","map","index","Zoom","in","style","transitionDelay","key","ListItem","ListItemIcon","ListItemText","noWrap","button","component"],"mappings":"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","file":"static/js/12.ca65ad19.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n//material-ui\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n//icons\r\nimport { CheckboxMarkedCircle, ContentCopy } from \"mdi-material-ui\";\r\n\r\nclass CopyButton extends Component {\r\n  state = {\r\n    success: null,\r\n  };\r\n\r\n  handleCopyClick = () => {\r\n    if (!this.state.success) {\r\n      this.setState({ success: true }, () => {\r\n        this.timer = setTimeout(() => {\r\n          this.setState({ success: false });\r\n        }, 1000);\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { t, text } = this.props;\r\n\r\n    return (\r\n      <Tooltip title={t(\"base.copyClipboard\")} aria-label={t(\"base.copyClipboard\")}>\r\n        <CopyToClipboard text={text} onCopy={this.handleCopyClick}>\r\n          <IconButton aria-label=\"Copy\">{this.state.success ? <CheckboxMarkedCircle /> : <ContentCopy />}</IconButton>\r\n        </CopyToClipboard>\r\n      </Tooltip>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(CopyButton);\r\n","import React, { Component } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport QRCode from \"qrcode.react\";\r\n//material-ui\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n//icons\r\nimport { Qrcode } from \"mdi-material-ui\";\r\n\r\nclass QrCode extends Component {\r\n  state = {\r\n    dialogQr: false,\r\n  };\r\n\r\n  handleDialogQrOpen = () => {\r\n    this.setState({ dialogQr: true });\r\n  };\r\n  handleDialogQrClose = () => {\r\n    this.setState({ dialogQr: false });\r\n  };\r\n\r\n  render() {\r\n    const { t, text } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Tooltip title={t(\"base.showQr\")} aria-label={t(\"base.showQr\")}>\r\n          <IconButton aria-label=\"Copy\" onClick={this.handleDialogQrOpen}>\r\n            <Qrcode />\r\n          </IconButton>\r\n        </Tooltip>\r\n\r\n        <Dialog onClose={this.handleDialogQrClose} aria-labelledby=\"dialogInfo\" open={this.state.dialogQr}>\r\n          <DialogContent>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              {t(\"base.qrCode\")}\r\n            </Typography>\r\n            <QRCode value={text} size={400} bgColor=\"#FFFFFF\" fgColor=\"#000000\" />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleDialogQrClose} color=\"secondary\" autoFocus>\r\n              {t(\"base.close\")}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(QrCode);\r\n","import React, { Component } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\n//material-ui\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\nimport Button from \"@material-ui/core/Button\";\r\n//icons\r\nimport { Gamepad, Filmstrip, BookOpenVariant, Bitcoin, Ethereum, Github } from \"mdi-material-ui\";\r\n//custom\r\nimport CopyButton from \"../structure/CopyButton\";\r\nimport QrCode from \"../structure/QrCode\";\r\nimport config from \"../config.json\";\r\n\r\nclass About extends Component {\r\n  render() {\r\n    const { t } = this.props;\r\n\r\n    const myCryptos = [\r\n      { primary: \"Ethereum\", secondary: config.ethereumAddress, link: 2, icon: <Ethereum /> },\r\n      { primary: \"Bitcoin\", secondary: config.bitcoinAddress, link: 2, icon: <Bitcoin /> },\r\n    ];\r\n\r\n    const myLinks = [\r\n      { primary: t(\"about.linksCode\"), secondary: t(\"about.linksCode2\"), link: \"https://github.com/simonbuechi\", icon: <Github /> },\r\n      { primary: t(\"about.linksBooks\"), secondary: t(\"about.linksBooks2\"), link: \"https://www.goodreads.com/user/show/32950234-simon-b-chi\", icon: <BookOpenVariant /> },\r\n      { primary: t(\"about.linksMovies\"), secondary: t(\"about.linksMovies2\"), link: \"http://www.imdb.com/user/ur27356928/\", icon: <Filmstrip /> },\r\n      { primary: t(\"about.linksGames\"), secondary: t(\"about.linksGames2\"), link: \"https://www.igdb.com/users/simonbuechi\", icon: <Gamepad /> },\r\n    ];\r\n\r\n    return (\r\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"flex-start\" spacing={4}>\r\n        <Grid item xs={12} md={6}>\r\n          <Typography variant=\"h2\" gutterBottom>\r\n            {t(\"about.title\")}\r\n          </Typography>\r\n          <Box my={3}>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              {t(\"about.body1\")}\r\n            </Typography>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              {t(\"about.body2\")}\r\n            </Typography>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              {t(\"about.body3\")}\r\n            </Typography>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              {t(\"about.body4\")}\r\n            </Typography>\r\n          </Box>\r\n          <Typography variant=\"h2\" gutterBottom>\r\n            {t(\"about.aboutSiteTitle\")} \r\n          </Typography>\r\n          <Box my={3}>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              {t(\"about.aboutSiteBody\")} \r\n            </Typography>\r\n            <Button variant=\"contained\" color=\"primary\" href=\"https://github.com/simonbuechi/dweb\">\r\n              {t(\"about.linkGithub\")} \r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <Typography variant=\"h2\" gutterBottom>\r\n          {t(\"about.blockchainTitle\")}\r\n          </Typography>\r\n          <List dense>\r\n            {myCryptos.map((item, index) => (\r\n              <Zoom in style={{ transitionDelay: 150 + index * 100 + \"ms\" }} key={item.primary}>\r\n                <div>\r\n                  <ListItem>\r\n                    <ListItemIcon color=\"secondary\">{item.icon}</ListItemIcon>\r\n                    <ListItemText\r\n                      primary={item.primary}\r\n                      secondary={\r\n                        <Typography variant=\"body2\" noWrap>\r\n                          {item.secondary}\r\n                        </Typography>\r\n                      }\r\n                    />\r\n                    <QrCode text={item.secondary} />\r\n                    <CopyButton text={item.secondary} />\r\n                  </ListItem>\r\n                </div>\r\n              </Zoom>\r\n            ))}\r\n          </List>\r\n          <Typography variant=\"h2\" gutterBottom>\r\n            {t(\"about.linksTitle\")}\r\n          </Typography>\r\n          <Box>\r\n            <List dense>\r\n              {myLinks.map((item, index) => (\r\n                <Zoom in style={{ transitionDelay: 850 + index * 100 + \"ms\" }} key={item.primary}>\r\n                  <div>\r\n                    <ListItem button component=\"a\" href={item.link}>\r\n                      <ListItemIcon color=\"secondary\">{item.icon}</ListItemIcon>\r\n                      <ListItemText primary={item.primary} secondary={item.secondary} />\r\n                    </ListItem>\r\n                  </div>\r\n                </Zoom>\r\n              ))}\r\n            </List>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(About);\r\n"],"sourceRoot":""}