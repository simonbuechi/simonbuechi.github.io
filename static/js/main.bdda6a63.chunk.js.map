{"version":3,"sources":["i18n/i18n.js","style/theme.js","structure/SplashScreen.js","serviceWorkerRegistration.js","index.js"],"names":["i18n","use","LanguageDetector","initReactI18next","init","whitelist","fallbackLng","cleanCode","lowerCaseLng","debug","interpolation","escapeValue","keySeparator","react","wait","resources","en","translation","transEn","de","transDe","theme","createTheme","palette","type","common","black","white","background","paper","default","error","light","main","dark","contrastText","text","primary","secondary","disabled","hint","brown","blueGrey","typography","fontFamily","join","fontWeight","overrides","MuiAppBar","colorTransparent","boxShadow","MuiDialog","paperFullScreen","overflow","MuiTabs","vertical","borderRight","marginRight","MuiTab","root","textTransform","MuiTypography","h1","lineHeight","fontSize","color","h2","display","fontStyle","backgroundImage","backgroundClip","paddingLeft","h3","body1","MuiButton","marginBottom","containedPrimary","backgroundColor","alpha","MuiRating","iconEmpty","MuiPaper","outlined","borderColor","MuiListItemSecondaryAction","MuiExpansionPanelDetails","MuiListItemIcon","MuiList","padding","paddingBottom","MuiGrid","margin","MuiFab","position","zIndex","bottom","right","MuiAvatar","colorDefault","MuiChip","SplashScreen","style","textAlign","top","left","transform","CircularProgress","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ThemeProvider","lazy","Router","App","CssBaseline","ReactDOM","render","fallback","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bdda6a63.chunk.js","sourcesContent":["import i18n from \"i18next\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport transDe from \"./de\";\r\nimport transEn from \"./en\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\n\r\ni18n\r\n  // load translation using xhr -> see /public/locales\r\n  // learn more: https://github.com/i18next/i18next-xhr-backend\r\n  //.use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to the react-i18next components.\r\n  // Alternative use the I18nextProvider: https://react.i18next.com/components/i18nextprovider\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    whitelist: [\"en\", \"de\"],\r\n    fallbackLng: \"en\",\r\n    cleanCode: true,\r\n    lowerCaseLng: true,\r\n    debug: false,\r\n    interpolation: {\r\n      escapeValue: false // not needed for react as it escapes by default\r\n    },\r\n    keySeparator: \".\",\r\n    react: {\r\n      wait: true\r\n    },\r\n    resources: {\r\n      en: { translation: transEn },\r\n      de: { translation: transDe }\r\n    }\r\n  });\r\n\r\nexport default i18n;\r\n","import { blueGrey, brown } from \"@material-ui/core/colors\";\r\nimport { createTheme } from \"@material-ui/core/styles\";\r\nimport { alpha } from \"@material-ui/core/styles/colorManipulator\";\r\n//import logo from '../assets/logo.svg';\r\n\r\nconst black = \"#000\";\r\nconst fontBrown = \"#604941\";\r\nconst iconBrown = \"#776A67\";\r\n\r\n// A custom theme for this app\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: \"light\",\r\n    common: {\r\n      black: \"rgba(40, 31, 31, 1)\",\r\n      white: \"#fff\",\r\n    },\r\n    background: {\r\n      paper: \"#fff\",\r\n      default: \"transparent\",\r\n    },\r\n    error: {\r\n      light: \"#e57373\",\r\n      main: \"#f44336\",\r\n      dark: \"#d32f2f\",\r\n      contrastText: \"rgba(185, 149, 149, 1)\",\r\n    },\r\n    text: {\r\n      primary: \"rgba(0, 0, 0, 1)\",\r\n      secondary: \"rgba(0, 0, 0, 0.64)\",\r\n      disabled: \"rgba(0, 0, 0, 0.5)\",\r\n      hint: \"rgba(0, 0, 0, 0.6)\",\r\n    },\r\n    primary: {\r\n      light: brown[400],\r\n      main: brown[700],\r\n      dark: brown[900],\r\n      contrastText: \"#fff\",\r\n    },\r\n    secondary: {\r\n      light: blueGrey[400],\r\n      main: blueGrey[600],\r\n      dark: blueGrey[900],\r\n      contrastText: \"#fff\",\r\n    },\r\n  },\r\n  typography: {\r\n    fontFamily: [\"Source Serif Pro\", \"serif\"].join(\",\"),\r\n    fontWeight: 400,\r\n  },\r\n  overrides: {\r\n    MuiAppBar: {\r\n      colorTransparent: {\r\n        boxShadow: \"none\",\r\n      },\r\n    },\r\n    MuiDialog: {\r\n      paperFullScreen: {\r\n        overflow: \"hidden\",\r\n      },\r\n    },\r\n    MuiTabs: {\r\n      vertical: {\r\n        borderRight: 0,\r\n        marginRight: 32,\r\n      },\r\n    },\r\n    MuiTab: {\r\n      root: {\r\n        textTransform: \"none\",\r\n        fontFamily: \"Source Serif Pro\",\r\n        fontWeight: 400,\r\n      },\r\n    },\r\n    MuiTypography: {\r\n      h1: {\r\n        lineHeight: \"2.5\",\r\n        fontSize: \"1rem\",\r\n        color: brown[900],\r\n        fontWeight: 400,\r\n      },\r\n      h2: {\r\n        display: \"inline-block\",\r\n        fontFamily: \"Playfair Display\",\r\n        fontStyle: \"italic\",\r\n        fontSize: \"2rem\",\r\n        lineHeight: \"1.5\",\r\n        fontWeight: 600,\r\n        backgroundImage: \"linear-gradient(to right, \" + black + \", \" + fontBrown + \")\",\r\n        color: \"transparent\",\r\n        \"-webkitBackgroundClip\": \"text\",\r\n        backgroundClip: \"text\",\r\n        paddingLeft: 4,\r\n      },\r\n      h3: {\r\n        fontSize: \"1.3rem\",\r\n        fontWeight: 400,\r\n        backgroundImage: \"linear-gradient(to right, \" + black + \", \" + fontBrown + \")\",\r\n        color: \"transparent\",\r\n        \"-webkitBackgroundClip\": \"text\",\r\n        lineHeight: \"1.5\",\r\n      },\r\n      body1: {\r\n        fontSize: \"0.875rem\",\r\n      },\r\n    },\r\n    MuiButton: {\r\n      root: {\r\n        fontFamily: \"Source Serif Pro\",\r\n        textTransform: \"none\",\r\n        marginBottom: 4,\r\n      },\r\n      containedPrimary: {\r\n        color: \"#000\",\r\n        backgroundColor: \"#fff\",\r\n        backgroundImage: \"linear-gradient(to right, \" + alpha(brown[200], 1) + \" 0%, \" + alpha(brown[200], 0.7) + \" 100%) \",\r\n      },\r\n    },\r\n    MuiRating: {\r\n      root: {\r\n        color: brown[600],\r\n      },\r\n      iconEmpty: {\r\n        color: brown[100],\r\n      },\r\n    },\r\n    MuiPaper: {\r\n      root: {\r\n        //    backgroundColor: \"rgba(255,255,255,0.5)\",\r\n      },\r\n      outlined: {\r\n        backgroundColor: \"rgba(255,255,255,0)\",\r\n        borderColor: brown[300],\r\n      },\r\n    },\r\n    MuiListItemSecondaryAction: {\r\n      root: {\r\n        display: \"flex\",\r\n      },\r\n    },\r\n    MuiExpansionPanelDetails: {\r\n      root: {\r\n        display: \"block\",\r\n      },\r\n    },\r\n    MuiListItemIcon: {\r\n      root: {\r\n        color: iconBrown,\r\n      },\r\n    },\r\n    MuiList: {\r\n      padding: {\r\n        paddingBottom: 24,\r\n      },\r\n    },\r\n    MuiGrid: {\r\n      \"spacing-xs-3\": {\r\n        margin: 0,\r\n      },\r\n    },\r\n    MuiFab: {\r\n      root: {\r\n        position: \"fixed\",\r\n        zIndex: 1000,\r\n        bottom: 16,\r\n        right: 16,\r\n      },\r\n      primary: {\r\n        backgroundColor: brown[500],\r\n        \"&:hover\": {\r\n          backgroundColor: brown[600],\r\n        },\r\n      },\r\n    },\r\n    MuiAvatar: {\r\n      colorDefault: {\r\n        color: black,\r\n        backgroundColor: brown[100],\r\n      },\r\n    },\r\n    MuiChip: {\r\n      root: {\r\n        marginRight: 5,\r\n        marginBottom: 5,\r\n        backgroundColor: brown[100],\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import React, { Component } from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nclass SplashScreen extends Component {\r\n  render() {\r\n\r\n    const styleWrapper = {\r\n      textAlign: \"center\",\r\n      position: \"absolute\",\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      transform: \"translate(-50%, -50%)\"\r\n    }\r\n    /*\r\n    const styleDiv  = {\r\n      backgroundImage: \"linear-gradient(90deg, #a1887f, #bcaaa4 )\",\r\n      borderRadius: \"50%\",\r\n      width: 200,\r\n      height: 200,\r\n      margin: \"0 auto\",\r\n      display: \"flex\",\r\n    }\r\n    const styleSvg = {\r\n      fill: \"#ffffff\",\r\n      display: \"block\",\r\n      margin: \"auto auto\",\r\n    }\r\n    <div style={styleDiv}>\r\n          <svg viewBox=\"0 0 24 24\" width=\"60%\" height=\"60%\" style={styleSvg}>\r\n            <rect x=\"3.05\" y=\"15.18\" width=\"18.31\" height=\"1.77\" transform=\"translate(-3.37 3.24) rotate(-13.32)\" />\r\n            <rect x=\"14.79\" y=\"0.34\" width=\"4.42\" height=\"12.36\" transform=\"translate(-1.05 4.09) rotate(-13.32)\" />\r\n            <rect x=\"8.08\" y=\"1.97\" width=\"4.42\" height=\"12.36\" transform=\"translate(-1.6 2.59) rotate(-13.32)\" />\r\n            <rect x=\"1.36\" y=\"3.55\" width=\"4.42\" height=\"12.36\" transform=\"translate(-2.15 1.09) rotate(-13.32)\" />\r\n            <path d=\"M4,20A10.4,10.4,0,0,0,14,23.82a10.4,10.4,0,0,0,7.42-7.94Z\" />\r\n          </svg>\r\n        </div>\r\n    */\r\n\r\n    return (\r\n      <div style={styleWrapper}>\r\n        <CircularProgress color=\"primary\" />\r\n        <p>Loading...</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SplashScreen;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport theme from \"./style/theme\";\r\nimport \"./i18n/i18n\";\r\nimport SplashScreen from \"./structure/SplashScreen\";\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n//import reportWebVitals from './reportWebVitals';\r\n//lazy load\r\nconst ThemeProvider = lazy(() => import(\"./utils/ThemeProvider\"));\r\nconst Router = lazy(() => import(\"./utils/Router\"));\r\nconst App = lazy(() => import(\"./App\"));\r\nconst CssBaseline = lazy(() => import(\"@material-ui/core/CssBaseline\"));\r\n\r\nReactDOM.render(\r\n  <Suspense fallback={<SplashScreen />}>\r\n    <ThemeProvider theme={theme}>\r\n      <Router>\r\n        <CssBaseline />\r\n        <App />\r\n      </Router>\r\n    </ThemeProvider>\r\n  </Suspense>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n//reportWebVitals(console.log);"],"sourceRoot":""}