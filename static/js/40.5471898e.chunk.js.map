{"version":3,"sources":["artworks/A006.js"],"names":["frag","vert","Artwork","props","gl","shader","canvasWidth","window","innerWidth","canvasHeight","innerHeight","c","setup","p5","canvasParentRef","createCanvas","WEBGL","parent","canvas","getContext","disable","DEPTH_TEST","i","random","Shader","_renderer","draw","setUniform","width","height","millis","box","keyPressed","keyCode","saveCanvas"],"mappings":"oHAAA,sDA2CIA,EAAI,qjDAsDJC,EAAI,02BAkCOC,UA/HC,SAACC,GACf,IAIIC,EAEAC,EANEC,EAAcC,OAAOC,WACrBC,EAAeF,OAAOG,YAIxBC,EAAI,GA8BR,OAAO,kBAAC,IAAD,CAAQC,MA3BD,SAACC,EAAIC,GACjBD,EAAGE,aAAaT,EAAaG,EAAcI,EAAGG,OAAOC,OAAOH,IAC5DV,EAAKS,EAAGK,OAAOC,WAAW,UACvBC,QAAQhB,EAAGiB,YACd,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBX,EAAEW,GAAKT,EAAGU,QAAQ,EAAG,GAEvBlB,EAAS,IAAImB,SAAOX,EAAGY,UAAWxB,EAAMD,GACxCa,EAAGR,OAAOA,IAmBiBqB,KAhBhB,SAACb,GACZR,EAAOsB,WAAW,cAAe,CAACd,EAAGe,MAAOf,EAAGgB,SAC/CxB,EAAOsB,WAAW,QAAuB,KAAdd,EAAGiB,UAC9BzB,EAAOsB,WAAW,WAnBH,GAoBftB,EAAOsB,WAAW,IAAKhB,GACvBE,EAAGR,OAAOA,GACVQ,EAAGkB,IAAIlB,EAAGe,MAAQ,IAUqBI,WAPtB,SAACnB,GAEC,KAAfA,EAAGoB,SAAiC,KAAfpB,EAAGoB,SAC1BpB,EAAGqB,WAAW,iBAAkB","file":"static/js/40.5471898e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport { Shader } from \"p5\";\r\n\r\nconst Artwork = (props) => {\r\n  const canvasWidth = window.innerWidth;\r\n  const canvasHeight = window.innerHeight;\r\n  //const seed = \"adsfasdf234234\";\r\n  const noctaves = 4;\r\n  let gl;\r\n  let c = [];\r\n  let shader;\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    p5.createCanvas(canvasWidth, canvasHeight, p5.WEBGL).parent(canvasParentRef);\r\n    gl = p5.canvas.getContext(\"webgl\");\r\n    gl.disable(gl.DEPTH_TEST);\r\n    for (let i = 0; i < 22; i++) {\r\n      c[i] = p5.random(-5, 5);\r\n    }\r\n    shader = new Shader(p5._renderer, vert, frag); //shaders are loaded\r\n    p5.shader(shader); //p5.s are applied\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    shader.setUniform(\"iResolution\", [p5.width, p5.height]); //pass some values to the shader\r\n    shader.setUniform(\"iTime\", p5.millis() * 0.0005);\r\n    shader.setUniform(\"noctaves\", noctaves);\r\n    shader.setUniform(\"c\", c);\r\n    p5.shader(shader);\r\n    p5.box(p5.width / 2);\r\n  };\r\n\r\n  const keyPressed = (p5) => {\r\n    //save the canvas when press \"s\" or space\r\n    if (p5.keyCode === 83 || p5.keyCode === 32) {\r\n      p5.saveCanvas(\"simons_artwork\", \"jpg\");\r\n    }\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} keyPressed={keyPressed} />;\r\n};\r\n\r\nvar frag = `\r\n// Author Pierre MARZIN 01/2017\r\n\r\n#ifdef GL_ES\r\nprecision mediump float;\r\n#endif\r\n\r\nuniform vec2 iResolution;\r\nuniform float iTime;\r\nuniform int noctaves;\r\nuniform float c[22];\r\n\r\nfloat noise( in vec2 x )\r\n{\r\n\treturn sin(1.5*x.x)*sin(1.5*x.y);\r\n}\r\n\r\nconst mat2 rot = mat2( 0.80,  0.6, -0.6,  0.8 );\r\nfloat fbm ( in vec2 _st) {\r\n    float v = 0.0;\r\n    float a = 0.6;\r\n    vec2 shift = 10.0*vec2(c[11],c[12]);\r\n    for (int i = 0; i < 12; ++i) {//noprotect\r\n\t\tif(i>=noctaves)break;\r\n        v += a * noise(_st);\r\n        _st = rot*_st* 2.0 + shift;\r\n        a *= 0.5;\r\n    }\r\n    return v;\r\n}\r\n\r\nvoid main() {\r\n    vec2 st =(-iResolution.xy+2.0*gl_FragCoord.xy)/iResolution.y;//(gl_FragCoord.xy/iResolution.xy);//\r\n    vec3 color = vec3(0.);\r\n    vec2 q = vec2(0.);\r\n    q.x = fbm( st+vec2(c[0],c[1]*.01*iTime) );\r\n    q.y = fbm( st+vec2(c[2],c[3]) );\r\n    vec2 r = vec2(0.);\r\n\r\n//play with the values here!\r\n\t\tr.x = fbm( st+ (3.0+0.4)*q+vec2(c[5],c[6]));\r\n    r.y = fbm( st+ (6.0+0.5)*q*sin(.01*iTime)+vec2(c[8]*.05*iTime,c[9]));\r\n    float f = fbm(st+c[10]*(r+length(q) ));\r\n    color = smoothstep(vec3(0.101961,0.19608,0.666667),vec3(0.666667,0.666667,0.98039),color);\r\n    color = mix(color,vec3(1.856,.05*(1.0+cos(1.5+.2*iTime)),0.164706),r.y+length(q));//\r\n    color = mix(color,vec3(1.5*sin(.1*iTime),0.0,cos(.13*iTime)),length(r+q));//.2+.2*(1.0+cos(0.5+.3*iTime))\r\n\t\tcolor = mix( color, vec3(0.9,0.9,0.9), dot(r,r) );\r\n\t\tcolor*=(1.5*f*f*f+1.8*f*f+1.7*f);\r\n\t\tcolor+=.4*vec3(1.8+r.x,0.7+q);\r\n\t\tcolor=pow(color, vec3(.5));\r\n    gl_FragColor = vec4(color,1.);\r\n}\r\n\r\n`;\r\nvar vert = `\r\n//standard vertex shader\r\n#ifdef GL_ES\r\n      precision highp float;\r\n    #endif\r\n\t\t#extension GL_OES_standard_derivatives : enable\r\n    // attributes, in\r\n    attribute vec3 aPosition;\r\n    attribute vec3 aNormal;\r\n    attribute vec2 aTexCoord;\r\n    attribute vec4 aVertexColor;\r\n\r\n    // attributes, out\r\n    varying vec3 var_vertPos;\r\n    varying vec4 var_vertCol;\r\n    varying vec3 var_vertNormal;\r\n    varying vec2 var_vertTexCoord;\r\n    \r\n    // matrices\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n    uniform mat3 uNormalMatrix;\r\n\r\n    void main() {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aPosition, 1.0);\r\n\r\n      // just passing things through\r\n      var_vertPos      = aPosition;\r\n      var_vertCol      = aVertexColor;\r\n      var_vertNormal   = aNormal;\r\n      var_vertTexCoord = aTexCoord;\r\n    }\r\n`;\r\n\r\nexport default Artwork;"],"sourceRoot":""}