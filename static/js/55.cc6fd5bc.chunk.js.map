{"version":3,"sources":["artworks/A022.js"],"names":["Artwork","props","x_grid_step","y_grid_step","CANVAS_WIDTH","window","localStorage","getItem","innerWidth","CANVAS_HEIGHT","innerHeight","SEED","particles_a","particles_b","particles_c","points","to_idx","x_idx","y_idx","Particle","p5","x","y","this","dir","createVector","vel","pos","speed","move","angle","max_step","Math","max","floor","min","grid_resolution","idx","min_dist","hypot","x_extent","ceil","y_extent","i","j","x1_idx","y1_idx","dist","voronoi_noise","TWO_PI","cos","sin","copy","mult","add","display","r","ellipse","setup","canvasParentRef","createCanvas","parent","noiseSeed","random","randomSeed","background","width","height","draw","noStroke","smooth","radius","map","alpha","fill","keyPressed","keyCode","fileName","location","hash","replace","saveCanvas"],"mappings":"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","file":"static/js/55.cc6fd5bc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nconst Artwork = (props) => {\r\n  //global constants\r\n  const CANVAS_WIDTH = window.localStorage.getItem(\"customWidth\") ? window.localStorage.getItem(\"customWidth\") : window.innerWidth;\r\n  const CANVAS_HEIGHT = window.localStorage.getItem(\"customHeight\") ? window.localStorage.getItem(\"customHeight\") : window.innerHeight;\r\n  const SEED = window.localStorage.getItem(\"signature\");\r\n\r\n  let particles_a = [];\r\n  let particles_b = [];\r\n  let particles_c = [];\r\n  let nums = 600;\r\n  let angle_scale = 125;\r\n  let grid_resolution = 5;\r\n  let points = [];\r\n  let x_grid_step;\r\n  let y_grid_step;\r\n\r\n  function to_idx(x_idx, y_idx) {\r\n    return x_idx + y_idx * grid_resolution;\r\n  }\r\n\r\n  function voronoi_noise(x, y) {\r\n    let max_step = Math.max(x_grid_step, y_grid_step);\r\n    let x_idx = Math.floor(x / x_grid_step);\r\n    x_idx = Math.min(Math.max(0, x_idx), grid_resolution - 1);\r\n    let y_idx = Math.floor(y / y_grid_step);\r\n    y_idx = Math.min(Math.max(0, y_idx), grid_resolution - 1);\r\n    let idx = to_idx(x_idx, y_idx);\r\n    let min_dist = Math.hypot(points[idx][0] - x, points[idx][1] - y);\r\n    let x_extent = Math.ceil(x_grid_step / max_step);\r\n    let y_extent = Math.ceil(y_grid_step / max_step);\r\n    for (let i = -x_extent; i <= x_extent; i++) {\r\n      for (let j = -y_extent; j <= y_extent; j++) {\r\n        let x1_idx = x_idx + i;\r\n        let y1_idx = y_idx + j;\r\n        if (x1_idx < 0 || x1_idx >= grid_resolution || y1_idx < 0 || y1_idx >= grid_resolution) {\r\n          continue;\r\n        }\r\n        idx = to_idx(x1_idx, y1_idx);\r\n        let dist = Math.hypot(points[idx][0] - x, points[idx][1] - y);\r\n        if (dist < min_dist) {\r\n          min_dist = dist;\r\n        }\r\n      }\r\n    }\r\n    return min_dist;\r\n  }\r\n  function Particle(p5, x, y) {\r\n    this.dir = p5.createVector(0, 0);\r\n    this.vel = p5.createVector(0, 0);\r\n    this.pos = p5.createVector(x, y);\r\n    this.speed = 1;\r\n\r\n    this.move = function () {\r\n      let angle = (voronoi_noise(this.pos.x, this.pos.y) * p5.TWO_PI) / angle_scale;\r\n      this.dir.x = p5.cos(angle);\r\n      this.dir.y = p5.sin(angle);\r\n      this.vel = this.dir.copy();\r\n      this.vel.mult(this.speed);\r\n      this.pos.add(this.vel);\r\n    };\r\n\r\n    this.display = function (r) {\r\n      p5.ellipse(this.pos.x, this.pos.y, r, r);\r\n    };\r\n  }\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    //setup canvas & basics\r\n    p5.createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT).parent(canvasParentRef);\r\n    p5.noiseSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n    p5.randomSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n\r\n    p5.background(21, 8, 50);\r\n    for (let x = 0; x < nums; x++) {\r\n      particles_a[x] = new Particle(p5, p5.random(0, p5.width), p5.random(0, p5.height));\r\n      particles_b[x] = new Particle(p5, p5.random(0, p5.width), p5.random(0, p5.height));\r\n      particles_c[x] = new Particle(p5, p5.random(0, p5.width), p5.random(0, p5.height));\r\n    }\r\n    x_grid_step = p5.width / grid_resolution;\r\n    y_grid_step = p5.height / grid_resolution;\r\n    for (let i = 0; i < grid_resolution; i++) {\r\n      for (let j = 0; j < grid_resolution; j++) {\r\n        let idx = to_idx(i, j);\r\n        points[idx] = [x_grid_step * (i + p5.random(0, 1)), y_grid_step * (j + p5.random(0, 1))];\r\n      }\r\n    }\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    p5.noStroke();\r\n    p5.smooth();\r\n    for (let i = 0; i < nums; i++) {\r\n      let radius = p5.map(i, 0, nums, 1, 3);\r\n      let alpha = p5.map(i, 0, nums, 0, 250);\r\n      p5.fill(83, 150, 20, alpha);\r\n      particles_a[i].move();\r\n      particles_a[i].display(radius);\r\n      p5.fill(75, 150, 22, alpha);\r\n      particles_b[i].move();\r\n      particles_b[i].display(radius);\r\n      p5.fill(180, 180, 18, alpha);\r\n      particles_c[i].move();\r\n      particles_c[i].display(radius);\r\n    }\r\n  };\r\n\r\n  const keyPressed = (p5) => {\r\n    //save the canvas when press \"s\" or space\r\n    if (p5.keyCode === 83 || p5.keyCode === 32) {\r\n      let fileName = \"SimonBuechi\" + window.location.hash;\r\n      fileName.replace(/[^a-zA-Z0-9]/g, \"\");\r\n      p5.saveCanvas(fileName, \"jpg\");\r\n    }\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} keyPressed={keyPressed} />;\r\n};\r\n\r\nexport default Artwork;"],"sourceRoot":""}