{"version":3,"sources":["pages/Wall.js"],"names":["Wall","state","dialogOpen","wallPosts","wallAuthors","ready","componentDidMount","a","listSpaces","config","ethereumAddress","includes","wallSpaceName","getThread","wallProfile","sort","b","timestamp","setState","i","length","hasOwnProperty","author","getProfile","x","handleDialogOpen","handleDialogClose","unixToDate","Intl","DateTimeFormat","weekday","year","month","day","format","Date","t","this","props","item","xs","lg","name","content","variant","gutterBottom","my","severity","color","href","startIcon","onClick","map","index","in","style","transitionDelay","key","postId","avatar","title","src","image","contentUrl","action","website","subheader","message","onClose","aria-labelledby","open","maxWidth","autoFocus","Component","withTranslation"],"mappings":"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","file":"static/js/22.2b8f179b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { getThread, listSpaces, getProfile } from \"3box/lib/api\";\r\n//material-ui\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n//icons\r\nimport { Account, Web, Twitter, Numeric3Box, Github, Email, OpenInNew, Information } from \"mdi-material-ui\";\r\n// custom\r\nimport config from \"../config.json\";\r\n\r\nclass Wall extends Component {\r\n  state = {\r\n    dialogOpen: false,\r\n    wallPosts: [],\r\n    wallAuthors: {},\r\n    ready: false,\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    const spaces = await listSpaces(config.ethereumAddress);\r\n    if (spaces.includes(config.wallSpaceName)) {\r\n      let wallPosts = await getThread(config.wallSpaceName, config.wallProfile, config.ethereumAddress, false, {});\r\n      // sort by timestamp\r\n      wallPosts = wallPosts.sort((a, b) => {\r\n        a = a.timestamp;\r\n        b = b.timestamp;\r\n        return a > b ? -1 : a < b ? 1 : 0;\r\n      });\r\n      this.setState({ wallPosts });\r\n      // render wallPosts without profile information\r\n      this.setState({ ready: true });\r\n      let wallAuthors = {};\r\n      // get all authors from wallposts and get their profiles\r\n      for (var i = 0; i < wallPosts.length; i++) {\r\n        if (!wallAuthors.hasOwnProperty(wallPosts[i].author)) {\r\n          const x = await getProfile(wallPosts[i].author);\r\n          wallAuthors[wallPosts[i].author] = x;\r\n        }\r\n      }\r\n      this.setState({ wallAuthors });\r\n    }\r\n  };\r\n\r\n  handleDialogOpen = () => {\r\n    this.setState({ dialogOpen: true });\r\n  };\r\n  handleDialogClose = () => {\r\n    this.setState({ dialogOpen: false });\r\n  };\r\n  unixToDate = (timestamp) => {\r\n    return Intl.DateTimeFormat(\"default\", { weekday: \"long\", year: \"numeric\", month: \"long\", day: \"numeric\" }).format(new Date(timestamp * 1000));\r\n  };\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const { ready, wallPosts, wallAuthors, dialogOpen } = this.state;\r\n\r\n    return (\r\n      <Grid item xs={12} lg={12}>\r\n                <Helmet>\r\n          <title>Simon Buechi | Wall</title>\r\n          <meta name=\"description\" content=\"Simon Buechi BÃ¼chi wall\" />\r\n        </Helmet>\r\n        <Typography variant=\"h2\" gutterBottom>\r\n          {t(\"wall.title\")}\r\n        </Typography>\r\n        <Box my={2}>\r\n          <Alert variant=\"filled\" severity=\"warning\">{t(\"base.experimental\")}</Alert>\r\n        </Box>\r\n        <Typography variant=\"body2\" gutterBottom>\r\n          {t(\"wall.description\")} ( {t(\"wall.buttonWriteWallNote\")} )\r\n        </Typography>\r\n        <Button variant=\"contained\" color=\"primary\" href={\"https://3box.io/\" + config.ethereumAddress} startIcon={<OpenInNew />}>\r\n          {t(\"wall.buttonWriteWall\")}\r\n        </Button>\r\n        &nbsp;\r\n        <Button variant=\"outlined\" color=\"primary\" onClick={this.handleDialogOpen} startIcon={<Information />}>\r\n          {t(\"wall.dialogInfoButton\")}\r\n        </Button>\r\n        {!ready ? (\r\n          <Box my={3}>\r\n            <CircularProgress color=\"primary\" />\r\n          </Box>\r\n        ) : (\r\n          wallPosts.map((item, index) => (\r\n            <Zoom in style={{ transitionDelay: 450 + index * 100 + \"ms\" }} key={item.postId}>\r\n              <Box my={1}>\r\n                <Card>\r\n                  <CardHeader\r\n                    avatar={\r\n                      <Tooltip title={item.author}>\r\n                        {wallAuthors.hasOwnProperty(item.author) && wallAuthors[item.author].hasOwnProperty(\"image\") ? (\r\n                          <Avatar src={\"https://ipfs.infura.io/ipfs/\" + wallAuthors[item.author].image[0].contentUrl[\"/\"]} />\r\n                        ) : (\r\n                          <Avatar>\r\n                            <Account />\r\n                          </Avatar>\r\n                        )}\r\n                      </Tooltip>\r\n                    }\r\n                    action={\r\n                      <>\r\n                        {wallAuthors.hasOwnProperty(item.author) && wallAuthors[item.author].hasOwnProperty(\"website\") && (\r\n                          <Tooltip title=\"Website\">\r\n                            <IconButton href={wallAuthors[item.author].website}>\r\n                              <Web />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                        {wallAuthors.hasOwnProperty(item.author) && wallAuthors[item.author].hasOwnProperty(\"email\") && (\r\n                          <Tooltip title=\"Email\">\r\n                            <IconButton>\r\n                              <Email />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                        {wallAuthors.hasOwnProperty(item.author) && wallAuthors[item.author].hasOwnProperty(\"github\") && (\r\n                          <Tooltip title=\"Github\">\r\n                            <IconButton>\r\n                              <Github />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                        {wallAuthors.hasOwnProperty(item.author) && wallAuthors[item.author].hasOwnProperty(\"twitter\") && (\r\n                          <Tooltip title=\"Twitter\">\r\n                            <IconButton>\r\n                              <Twitter />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                      </>\r\n                    }\r\n                    title={\r\n                      wallAuthors.hasOwnProperty(item.author) && wallAuthors[item.author].hasOwnProperty(\"name\") ? wallAuthors[item.author].name : item.author\r\n                    }\r\n                    subheader={this.unixToDate(item.timestamp)}\r\n                  />\r\n                  <CardContent>\r\n                    <Typography variant=\"body2\">{item.message}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Box>\r\n            </Zoom>\r\n          ))\r\n        )}\r\n        <Dialog onClose={this.handleDialogClose} aria-labelledby=\"simple-dialog-title\" open={dialogOpen} maxWidth=\"xl\">\r\n          <DialogContent>\r\n            {t(\"wall.dialogInfoTitle\")}\r\n            <Button variant=\"outlined\" color=\"primary\" href=\"https://docs.3box.io/\" startIcon={<Numeric3Box />}>\r\n              {t(\"wall.dialogInfo3boxButton\")}\r\n            </Button>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleDialogClose} color=\"secondary\" autoFocus>\r\n              {t(\"base.close\")}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(Wall);\r\n"],"sourceRoot":""}