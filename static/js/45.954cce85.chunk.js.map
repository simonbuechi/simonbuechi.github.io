{"version":3,"sources":["artworks/A012.js"],"names":["Artwork","props","canvasWidth","window","innerWidth","canvasHeight","innerHeight","seed","localStorage","getItem","xoff","coloroff","setup","p5","canvasParentRef","createCanvas","parent","noiseSeed","floor","random","randomSeed","colorMode","HSB","backgroundHue","noise","background","color","noStroke","i","Math","max","width","height","step","gradient","lerpColor","BACKGROUND_BRIGHTNESS","fill","ellipse","noFill","strokeWeight","draw","x1","x2","x3","x4","y1","y2","y3","y4","stroke","map","bezier","XOFF_STEP","noLoop","keyPressed","keyCode","saveCanvas"],"mappings":"oHAAA,6CA6EeA,UA1EC,SAACC,GAEf,IAAMC,EAAcC,OAAOC,WACrBC,EAAeF,OAAOG,YACtBC,EAAOJ,OAAOK,aAAaC,QAAQ,aAWrCC,EAAO,EACPC,EAAW,IAuDf,OAAO,kBAAC,IAAD,CAAQC,MArDD,SAACC,EAAIC,GAEjBD,EAAGE,aAAab,EAAaG,GAAcW,OAAOF,GAClDD,EAAGI,UAAmB,OAATV,EAAgBA,EAAOM,EAAGK,MAAML,EAAGM,OAAO,EAAG,OAC1DN,EAAGO,WAAoB,OAATb,EAAgBA,EAAOM,EAAGK,MAAML,EAAGM,OAAO,EAAG,OAC3DN,EAAGQ,UAAUR,EAAGS,IAAK,IAAK,IAAK,IAAK,KAEpC,IAAMC,EAAgBV,EAAGK,MAAuB,IAAjBL,EAAGW,MAAM,MACxCX,EAAGY,WAAWZ,EAAGa,MAAMH,EAjBK,GACA,KAiB5BV,EAAGc,WACH,IAAK,IAAIC,EAAIC,KAAKC,IAAIjB,EAAGkB,MAAOlB,EAAGmB,QAASJ,EAAI,EAAGA,IAAK,CACtD,IAAMK,EAAOL,EAAIC,KAAKC,IAAIjB,EAAGkB,MAAOlB,EAAGmB,QACjCE,EAAWrB,EAAGsB,UAClBtB,EAAGa,MAAMH,EAtBe,GAsBuBa,IAC/CvB,EAAGa,MAAMH,EAvBe,GACA,IAuBxBU,GAEFpB,EAAGwB,KAAKH,GACRrB,EAAGyB,QAAQzB,EAAGkB,MAAQ,EAAGlB,EAAGmB,OAAS,EAAGC,EAAOpB,EAAGkB,MAAOE,EAAOpB,EAAGmB,QAErEnB,EAAG0B,SACH1B,EAAG2B,aAAe,GAgCSC,KA7BhB,SAAC5B,GAEZ,IAAI6B,EAvCc,IAuCT7B,EAAGkB,MAAsBlB,EAAGW,MAAMd,EAAO,IAC9CiC,EAxCc,IAwCT9B,EAAGkB,MAAsBlB,EAAGW,MAAMd,EAAO,IAC9CkC,EAzCc,IAyCT/B,EAAGkB,MAAsBlB,EAAGW,MAAMd,EAAO,IAC9CmC,EA1Cc,IA0CThC,EAAGkB,MAAsBlB,EAAGW,MAAMd,EAAO,IAC9CoC,EA3Cc,IA2CTjC,EAAGmB,OAAuBnB,EAAGW,MAAMd,EAAO,IAC/CqC,EA5Cc,IA4CTlC,EAAGmB,OAAuBnB,EAAGW,MAAMd,EAAO,IAC/CsC,EA7Cc,IA6CTnC,EAAGmB,OAAuBnB,EAAGW,MAAMd,EAAO,IAC/CuC,EA9Cc,IA8CTpC,EAAGmB,OAAuBnB,EAAGW,MAAMd,EAAO,IAInDG,EAAGqC,OAAOrC,EAAGsC,IAAItC,EAAGW,MAAMb,GAAW,EAAG,EAAG,EAAG,KA3CtB,IACA,GACL,IA0CnBE,EAAGuC,OAAOV,EAAII,EAAIH,EAAII,EAAIH,EAAII,EAAIH,EAAII,GAEtCtC,GAnDoB,MAkDpBD,GAnDgB,OAEK2C,GAoDnBxC,EAAGyC,UAWkCC,WAPtB,SAAC1C,GAEC,KAAfA,EAAG2C,SAAiC,KAAf3C,EAAG2C,SAC1B3C,EAAG4C,WAAW,iBAAkB","file":"static/js/45.954cce85.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nconst Artwork = (props) => {\r\n  //global constants\r\n  const canvasWidth = window.innerWidth;\r\n  const canvasHeight = window.innerHeight;\r\n  const seed = window.localStorage.getItem(\"signature\");\r\n  const SIZE_FACTOR = 1.2;\r\n  const XOFF_STEP = 0.001;\r\n  const COLOROFF_STEP = 0.002;\r\n  const MAX_ITERATIONS = XOFF_STEP * 1000;\r\n  const BACKGROUND_SATURATION = 30;\r\n  const BACKGROUND_BRIGHTNESS = 65;\r\n  const BACKGROUND_BRIGHTNESS_LIGHTEN = 25;\r\n  const BEZIER_SATURATION = 100;\r\n  const BEZIER_BRIGHTNESS = 50;\r\n  const BEZIER_ALPHA = 50;\r\n  let xoff = 0;\r\n  let coloroff = 100;\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    //setup canvas\r\n    p5.createCanvas(canvasWidth, canvasHeight).parent(canvasParentRef);\r\n    p5.noiseSeed(seed !== null ? seed : p5.floor(p5.random(1, 10000)));\r\n    p5.randomSeed(seed !== null ? seed : p5.floor(p5.random(1, 10000)));\r\n    p5.colorMode(p5.HSB, 360, 100, 100, 100);\r\n    //set background\r\n    const backgroundHue = p5.floor(p5.noise(1000) * 360);\r\n    p5.background(p5.color(backgroundHue, BACKGROUND_SATURATION, BACKGROUND_BRIGHTNESS));\r\n    p5.noStroke();\r\n    for (let i = Math.max(p5.width, p5.height); i > 0; i--) {\r\n      const step = i / Math.max(p5.width, p5.height);\r\n      const gradient = p5.lerpColor(\r\n        p5.color(backgroundHue, BACKGROUND_SATURATION, BACKGROUND_BRIGHTNESS + BACKGROUND_BRIGHTNESS_LIGHTEN),\r\n        p5.color(backgroundHue, BACKGROUND_SATURATION, BACKGROUND_BRIGHTNESS),\r\n        step\r\n      );\r\n      p5.fill(gradient);\r\n      p5.ellipse(p5.width / 2, p5.height / 2, step * p5.width, step * p5.height);\r\n    }\r\n    p5.noFill();\r\n    p5.strokeWeight = 3;\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    // bezier noise curve\r\n    var x1 = p5.width * SIZE_FACTOR * p5.noise(xoff + 15);\r\n    var x2 = p5.width * SIZE_FACTOR * p5.noise(xoff + 25);\r\n    var x3 = p5.width * SIZE_FACTOR * p5.noise(xoff + 35);\r\n    var x4 = p5.width * SIZE_FACTOR * p5.noise(xoff + 45);\r\n    var y1 = p5.height * SIZE_FACTOR * p5.noise(xoff + 55);\r\n    var y2 = p5.height * SIZE_FACTOR * p5.noise(xoff + 65);\r\n    var y3 = p5.height * SIZE_FACTOR * p5.noise(xoff + 75);\r\n    var y4 = p5.height * SIZE_FACTOR * p5.noise(xoff + 85);\r\n    //p5.stroke(p5.color(0,0,100, BEZIER_ALPHA));\r\n    //p5.bezier(x1, y1, x2, y2, x3, y3, x4, y4);\r\n    //p5.bezier(p5.width-x1, p5.height-y1, p5.width-x2, p5.height-y2, p5.width-x3, p5.height-y3, p5.width-x4, p5.height-y4);\r\n    p5.stroke(p5.map(p5.noise(coloroff), 0, 1, 0, 360), BEZIER_SATURATION, BEZIER_BRIGHTNESS, BEZIER_ALPHA);\r\n    p5.bezier(x1, y1, x2, y2, x3, y3, x4, y4);\r\n    xoff += XOFF_STEP;\r\n    coloroff += COLOROFF_STEP;\r\n    if (xoff >= MAX_ITERATIONS) {\r\n      p5.noLoop();\r\n    }\r\n  };\r\n\r\n  const keyPressed = (p5) => {\r\n    //save the canvas when press \"s\" or space\r\n    if (p5.keyCode === 83 || p5.keyCode === 32) {\r\n      p5.saveCanvas(\"simons_artwork\", \"jpg\");\r\n    }\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} keyPressed={keyPressed} />;\r\n};\r\n\r\nexport default Artwork;\r\n\r\n/*\r\nArrayList particles = new ArrayList();\r\n\r\nvoid setup(){\r\n  fullScreen();\r\n  stroke(255, 0, 0, 2);\r\n  background(0);\r\n  for(int i = 0; i < 50; i++){\r\n    particles.add(new Particle(new PVector(random(width), random(height)))); \r\n  }\r\n}\r\n\r\nvoid draw(){\r\n  for(int i = 0; i < particles.size(); i++){\r\n    Particle p = (Particle) particles.get(i);\r\n    p.move(); \r\n    p.boundary();\r\n    for(int q = 0; q < particles.size(); q++){\r\n      Particle p2 = (Particle) particles.get(q);\r\n      if(PVector.dist(p.loc, p2.loc) < 150){\r\n        noFill();\r\n        float dx = map(dist(p.loc.x, p2.loc.x, width/2, height/2), 0, width, -50, 50);\r\n        float dy = map(dist(p.loc.y, p2.loc.y, width/2, height/2), 0, width, -50, 50);\r\n        float d2x = map(dist(-p.loc.x, p2.loc.x, width/2, height/2), 0, width, -50, 50);\r\n        float d2y = map(dist(-p.loc.y, p2.loc.y, width/2, height/2), 0, width, -50, 50);\r\n        bezier(p.loc.x, p.loc.y, p.loc.x+dx, p.loc.y+dy, p2.loc.x+d2x, p2.loc.y+d2y, p2.loc.x, p2.loc.y);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass Particle {\r\n  PVector loc, vel;\r\n  \r\n  Particle(PVector loc){\r\n    this.loc = loc;\r\n    vel = new PVector(random(-2, 2), random(-2, 2));\r\n  }\r\n  \r\n  void move(){\r\n    loc.add(vel); \r\n  }\r\n  \r\n  void boundary(){\r\n    if(loc.x < 0) vel.x *= -1;\r\n    if(loc.x > width) vel.x *= -1;\r\n    if(loc.y < 0) vel.y *= -1;\r\n    if(loc.y > height) vel.y *= -1;\r\n  }\r\n}\r\n\r\n*/\r\n"],"sourceRoot":""}