{"version":3,"sources":["artworks/A010.js"],"names":["Artwork","props","cClouds","cSky","cFurther","cCloser","cMist","cSun","xoff","CANVAS_WIDTH","window","localStorage","getItem","innerWidth","CANVAS_HEIGHT","innerHeight","SEED","setup","p5","canvasParentRef","createCanvas","parent","noiseSeed","floor","random","randomSeed","smooth","colorMode","HSB","color","background","draw","skyColor","sunColor","noStroke","RGB","i","Math","max","width","height","step","gradient","lerpColor","fill","ellipse","fade","cloudColor","x","j","y","alfa","noise","map","setAlpha","clouds","closerColor","furtherColor","mistColor","y0","cy","pow","dx","a","b","c","d","e","sin","strokeWeight","stroke","line","mountains","noLoop","keyPressed","keyCode","saveCanvas"],"mappings":"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","file":"static/js/43.202a5c81.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nconst Artwork = (props) => {\r\n  const CANVAS_WIDTH = window.localStorage.getItem(\"customWidth\") ? window.localStorage.getItem(\"customWidth\") : window.innerWidth;\r\n  const CANVAS_HEIGHT = window.localStorage.getItem(\"customHeight\") ? window.localStorage.getItem(\"customHeight\") : window.innerHeight;\r\n  const SEED = window.localStorage.getItem(\"signature\");\r\n  const MOUNTAIN_ROWS = 8;\r\n  const MOUNTAIN_INTERVAL = 40;\r\n  const MOUNTAIN_POSITIONING = 0.6;\r\n  const CLOUDINESS = 0.6;\r\n  let cClouds;\r\n  let cSky;\r\n  let cFurther;\r\n  let cCloser;\r\n  let cMist, cSun;\r\n  let xoff;\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    // setup canvas\r\n    p5.createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT).parent(canvasParentRef);\r\n    p5.noiseSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n    p5.randomSeed(SEED !== null ? SEED : p5.floor(p5.random(1, 10000)));\r\n    p5.smooth();\r\n    //define the colors\r\n    p5.colorMode(p5.HSB, 360, 100, 100);\r\n    cClouds = p5.color(203, 0, 80); //light rose for the clouds\r\n    cSky = p5.color(203, 50, 60); // purplish saturated medium blue for the fade of the sky\r\n    cFurther = p5.color(336, 78, 43); //purplish unsaturated light bluse for the further mountains\r\n    cCloser = p5.color(267, 75, 20); //greeny saturated dark blue for the closer mountains\r\n    cMist = p5.color(360, 0, 100); //white for the mist\r\n    cSun = p5.color(50, 50, 95);\r\n    p5.background(cSky);\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    fade(p5, cSky, cSun);\r\n    clouds(p5, cClouds);\r\n    mountains(p5, cCloser, cFurther, cMist);\r\n    p5.noLoop();\r\n  };\r\n\r\n  function fade(p5, skyColor, sunColor) {\r\n    p5.noStroke();\r\n    p5.colorMode(p5.RGB);\r\n    for (let i = Math.max(p5.width, p5.height); i > 0; i--) {\r\n      const step = i / Math.max(p5.width, p5.height);\r\n      const gradient = p5.lerpColor(sunColor, skyColor, step);\r\n      p5.fill(gradient);\r\n      p5.ellipse(p5.width / 2, p5.height / 2, step * p5.width, step * p5.height);\r\n    }\r\n    p5.colorMode(p5.HSB, 360, 100, 100);\r\n  }\r\n\r\n  function clouds(p5, cloudColor) {\r\n    xoff = 0;\r\n    for (let x = 0; x < p5.width; x += 1) {\r\n      let j = 10;\r\n      for (let y = 0; y < p5.height / 2; y += 1) {\r\n        let alfa = p5.noise(xoff, j);\r\n        alfa = p5.map(alfa, CLOUDINESS, 1, 0, 1);\r\n        p5.noStroke();\r\n        cloudColor.setAlpha(alfa);\r\n        p5.fill(cloudColor);\r\n        p5.ellipse(x, y, 2, 2);\r\n        j += 0.02; //increase j faster than i so the clouds look horizontal\r\n      }\r\n      xoff += 0.005;\r\n    }\r\n  }\r\n\r\n  function mountains(p5, closerColor, furtherColor, mistColor) {\r\n    //FIND THE REFERENCE Y OF EACH MOUNTAIN:\r\n    let y0 = p5.height * MOUNTAIN_POSITIONING; //fist reference y\r\n    let cy = []; //initialize the reference y array\r\n    for (let j = 0; j < MOUNTAIN_ROWS; j++) {\r\n      cy[9 - j] = y0;\r\n      y0 -= MOUNTAIN_INTERVAL / p5.pow(1.1, j);\r\n    }\r\n    //DRAW THE MOUNTAINS/\r\n    let dx = 0;\r\n    for (let j = 1; j < MOUNTAIN_ROWS; j++) {\r\n      let a = p5.random(-p5.width / 2, p5.width / 2); //random discrepancy between the sin waves\r\n      let b = p5.random(-p5.width / 2, p5.width / 2); //random discrepancy between the sin waves\r\n      let c = p5.random(2, 4); //random amplitude for the second sin wave\r\n      let d = p5.random(40, 50); //noise function amplitude\r\n      let e = p5.random(-p5.width / 2, p5.width / 2); //adds a discrepancy between the noise of each mountain\r\n      for (let x = 0; x < p5.width; x++) {\r\n        let y = cy[j]; //y = reference y\r\n        y += 10 * j * p5.sin((2 * dx) / j + a); //first sin wave oscillates according to j (the closer the mountain, the bigger the amplitude and smaller the frequency)\r\n        y += c * j * p5.sin((5 * dx) / j + b); //second sin wave has a random medium amplitude (affects more the further mountains) and bigger frequenc\r\n        y += d * j * p5.noise((1.2 * dx) / j + e); //first p5. function adds randomness to the mountains, amplitude depends on a random number and increases with j, frequency decrases with j\r\n        y += 1.7 * j * p5.noise(10 * dx); //second noise function simulates the canopy, it has high frequency and small amplitude depending on j so it is smoother on the further mountains\r\n        p5.strokeWeight(2); //mountains look smoother with stroke weight of 2\r\n        p5.stroke(p5.lerpColor(furtherColor, closerColor, j / 9));\r\n        p5.line(x, y, x, p5.height);\r\n        dx += 0.02;\r\n      }\r\n      //ADD MIST\r\n      p5.strokeWeight(1);\r\n      for (let i = p5.height; i > cy[j]; i -= 1) {\r\n        let alfa = p5.map(i, cy[j], p5.height, 0, 1 / (j + 1)); //alfa is begins bigger for the further mountains\r\n        mistColor.setAlpha(alfa);\r\n        p5.stroke(mistColor);\r\n        //p5.stroke(p5.lerpColor(mistColor, mistColor, 0.2));\r\n        p5.line(0, i, p5.width, i);\r\n      }\r\n    }\r\n  }\r\n\r\n  const keyPressed = (p5) => {\r\n    //save the canvas when press \"s\" or space\r\n    if (p5.keyCode === 83 || p5.keyCode === 32) {\r\n      p5.saveCanvas(\"simons_artwork\", \"jpg\");\r\n    }\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} keyPressed={keyPressed} />;\r\n};\r\n\r\nexport default Artwork;"],"sourceRoot":""}