{"version":3,"sources":["artworks/A011.js"],"names":["Artwork","props","b1","b2","m1","m2","m3","mountain","seed","window","localStorage","getItem","canvasWidth","innerWidth","canvasHeight","innerHeight","sky","Mountain","p5","strokeWeight","t","h","x","width","beginShape","vertex","height","map","noise","endShape","Star","noStroke","this","y","c","a","dir","sz","random","fill","ellipse","setup","canvasParentRef","createCanvas","parent","noiseSeed","Math","color","i","draw","w","c1","c2","axis","noFill","inter","float","lerpColor","stroke","line","setGradient","display","shine","keyPressed","keyCode","saveCanvas"],"mappings":"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","file":"static/js/44.2f1d9dca.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nconst Artwork = (props) => {\r\n  // get seed from localstorage\r\n  const seed = window.localStorage.getItem(\"signature\");\r\n  // set size to fullscreen\r\n  const canvasWidth = window.innerWidth;\r\n  const canvasHeight = window.innerHeight;\r\n\r\n  const Y_AXIS = 1;\r\n  const X_AXIS = 2;\r\n  const NO_STARS = 50;\r\n  const MOUNTAIN_ALTITUDE = 200;\r\n  const MOUNTAIN_NOISE = 0.005;\r\n  let sky = [];\r\n  let b1, b2, m1, m2, m3;\r\n  let mountain;\r\n  /*\r\n  let sh;\r\n  let g;\r\n\r\n  const vs = \r\n  'attribute vec3 aPosition;' +\r\n  'attribute vec2 aTexCoord;' +\r\n  'varying vec2 vTexCoord;' +\r\n  'void main() {' +\r\n    'vTexCoord = aTexCoord;' +\r\n    'vec4 positionVec4 = vec4(aPosition, 1.0);' +\r\n    'positionVec4.xy = positionVec4.xy * 2.0 - 1.0;' +\r\n    'gl_Position = positionVec4;' +\r\n  '}';\r\n\r\n  const fs = \r\n  'precision mediump float;' +\r\n  'varying vec2 vTexCoord;' +\r\n  'uniform sampler2D smp; ' +\r\n  'uniform float time; ' +\r\n  'uniform vec2 mouse; ' +\r\n  'uniform vec2 resolution;' + \r\n  'vec2 reverseY(vec2 v) {' +\r\n    'return vec2(v.x, resolution.y-v.y);' +\r\n  '}' +\r\n  'vec2 ratioV(vec2 v) {' +\r\n    'return vec2(v.x/resolution.x, v.y/resolution.y);' +\r\n  '}' +\r\n  'vec3 hsv(float h, float s, float v) {' +\r\n    'vec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);' +\r\n    'vec3 p = abs(fract(vec3(h) + t.xyz) * 6.0 - vec3(t.w));' +\r\n    'return v * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), s);' +\r\n  '}' +\r\n  'void main() {' +\r\n    'vec2 pos = ratioV(gl_FragCoord.xy * 2.0 - resolution);' +\r\n    'vec2 mousePos = ratioV(reverseY(mouse) * 2.0 - resolution);' +\r\n    'float h = abs(mod(time * 15.0, 360.0) / 360.0);' +\r\n    'float f = 0.2 / length(pos - mousePos);' +\r\n    'vec4 smpColor = texture2D(smp, ratioV(reverseY(gl_FragCoord.xy)));' +\r\n    'if(length(smpColor) > 0.0){' +\r\n      'vec3 tmp = mix(hsv(h, 1.0, 0.5) + f, smpColor.rgb, 0.975);' +\r\n      'gl_FragColor = vec4(tmp, 1.0);' +\r\n    '}else{' +\r\n      'gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);' +\r\n    '}' +\r\n  '}';\r\n*/\r\n\r\n  function setGradient(p5, x, y, w, h, c1, c2, axis) {\r\n    p5.noFill();\r\n    if (axis === Y_AXIS) {\r\n      // Top to bottom gradient\r\n      for (let i = y; i <= y + h; i++) {\r\n        let inter = p5.float(p5.map(i, y, y + h, 0, 1));\r\n        let c = p5.lerpColor(c1, c2, inter);\r\n        p5.stroke(c);\r\n        p5.line(x, i, x + w, i);\r\n      }\r\n    } else if (axis === X_AXIS) {\r\n      // Left to right gradient\r\n      for (let i = x; i <= x + w; i++) {\r\n        let inter = p5.float(p5.map(i, x, x + w, 0, 1));\r\n        let c = p5.lerpColor(c1, c2, inter);\r\n        p5.stroke(c);\r\n        p5.line(i, y, i, y + h);\r\n      }\r\n    }\r\n  }\r\n\r\n  class Mountain {\r\n    constructor(p5) {\r\n      p5.strokeWeight(5);\r\n    }\r\n    display(p5, t, h) {\r\n      let x = 0.0;\r\n      while (x < p5.width) {\r\n        p5.beginShape();\r\n        p5.vertex(0, p5.height + 200);\r\n        p5.vertex(x, h + p5.map(p5.noise(t), 0, 1, 0, MOUNTAIN_ALTITUDE));\r\n        x++;\r\n        t += MOUNTAIN_NOISE;\r\n        p5.vertex(p5.width, p5.height + 200);\r\n        p5.endShape();\r\n      }\r\n    }\r\n  }\r\n\r\n  class Star {\r\n    constructor(p5) {\r\n      p5.noStroke();\r\n      this.x = 255;\r\n      this.y = 255;\r\n      this.c = 255;\r\n      this.a = -1;\r\n      this.dir = 0.0;\r\n      this.sz = 0.0;\r\n    }\r\n\r\n    shine(p5) {\r\n      if (this.a < 0) {\r\n        this.x = p5.random(p5.width);\r\n        this.y = p5.random(0, 270);\r\n        this.sz = p5.random(3);\r\n        this.dir = p5.random(1, 3);\r\n        this.a = 0;\r\n      }\r\n      p5.fill(this.c, this.a);\r\n      p5.ellipse(this.x, this.y, this.sz, this.sz);\r\n      this.a = this.a + this.dir;\r\n      if (this.a > 255) {\r\n        this.a = 255;\r\n        this.dir = p5.random(-5, -10);\r\n      }\r\n    }\r\n  }\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    // setup canvas\r\n    p5.createCanvas(canvasWidth, canvasHeight).parent(canvasParentRef);\r\n\r\n    // noise setup\r\n    p5.noiseSeed(seed !== null ? seed : Math.random() * 100);\r\n    // setup WEBGL shader\r\n    //g = p5.createGraphics(p5.width, p5.height, p5.WEBGL);\r\n    //sh = p5.createShader(vs, fs);\r\n\r\n    b2 = p5.color(194, 24, 91); // bottom background color\r\n    b1 = p5.color(74, 20, 140); // top background color\r\n\r\n    m1 = p5.color(80, 22, 152);\r\n    m2 = p5.color(47, 13, 89);\r\n    m3 = p5.color(0, 0, 0);\r\n\r\n    for (let i = 0; i < NO_STARS; i++) {\r\n      sky[i] = new Star(p5);\r\n    }\r\n    mountain = new Mountain(p5);\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    setGradient(p5, 0, 0, p5.width, 0.65 * p5.height, b1, b2, Y_AXIS);\r\n    p5.stroke(m1);\r\n    mountain.display(p5, 100, 350);\r\n    p5.stroke(m2);\r\n    mountain.display(p5, 200, 450);\r\n    p5.stroke(m3);\r\n    mountain.display(p5, 300, 550);\r\n    p5.noStroke();\r\n    for (let i = 0; i < NO_STARS; i++) {\r\n      sky[i].shine(p5);\r\n    }\r\n    /*\r\n    const p = p5.pixelDensity();\r\n    sh.setUniform(\"smp\", g);\r\n    sh.setUniform(\"time\", p5.millis() / 10000.0);\r\n    sh.setUniform(\"mouse\", [p5.mouseX * p, p5.mouseY * p]);\r\n    sh.setUniform(\"resolution\", [p5.width * p, p5.height * p]);\r\n    g.shader(sh);\r\n    g.rect(0, 0, p5.width, p5.height);\r\n    p5.image(g, 0, 0);\r\n    */\r\n  };\r\n\r\n  const keyPressed = (p5) => {\r\n    //save the canvas when press \"s\" or space\r\n    if (p5.keyCode === 83 || p5.keyCode === 32) {\r\n      p5.saveCanvas(\"simons_artwork\", \"jpg\");\r\n    }\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} keyPressed={keyPressed} />;\r\n};\r\n\r\nexport default Artwork;"],"sourceRoot":""}