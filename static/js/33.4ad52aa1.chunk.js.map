{"version":3,"sources":["structure/QrCode.js","pages/About.js"],"names":["QrCode","state","dialogQr","handleDialogQrOpen","setState","handleDialogQrClose","this","props","t","text","Fragment","Tooltip","title","aria-label","IconButton","color","onClick","fontSize","Dialog","onClose","aria-labelledby","open","DialogContent","Typography","variant","gutterBottom","value","size","bgColor","fgColor","DialogActions","Button","autoFocus","Component","withTranslation","About","dialogInfo","success","handleCopyClick","timer","setTimeout","handleDialogInfoOpen","handleDialogInfoClose","questions","question","answer","myContacts","primary","secondary","link","icon","myCryptos","config","ensName","qr","copy","ethereumAddress","bitcoinAddress","myLinks","Grid","container","direction","justifyContent","alignItems","spacing","Helmet","name","content","item","xs","md","Box","mb","List","dense","map","index","Zoom","in","style","transitionDelay","key","ListItem","button","component","href","ListItemIcon","ListItemText","startIcon","onCopy","noWrap"],"mappings":"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","file":"static/js/33.4ad52aa1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport QRCode from \"qrcode.react\";\r\n//material-ui\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n//icons\r\nimport { Qrcode } from \"mdi-material-ui\";\r\n\r\nclass QrCode extends Component {\r\n  state = {\r\n    dialogQr: false,\r\n  };\r\n\r\n  handleDialogQrOpen = () => {\r\n    this.setState({ dialogQr: true });\r\n  };\r\n  handleDialogQrClose = () => {\r\n    this.setState({ dialogQr: false });\r\n  };\r\n\r\n  render() {\r\n    const { t, text } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Tooltip title={t(\"base.showQr\")} aria-label={t(\"base.showQr\")}>\r\n          <IconButton color=\"secondary\" aria-label=\"Copy\" onClick={this.handleDialogQrOpen}>\r\n            <Qrcode fontSize=\"small\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n\r\n        <Dialog onClose={this.handleDialogQrClose} aria-labelledby=\"dialogInfo\" open={this.state.dialogQr}>\r\n          <DialogContent>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              {t(\"base.qrCode\")}\r\n            </Typography>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n            {text}\r\n            </Typography>\r\n            <QRCode value={text} size={350} bgColor=\"#FFFFFF\" fgColor=\"#000000\" />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleDialogQrClose} variant=\"contained\" color=\"primary\" autoFocus>\r\n              {t(\"base.close\")}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(QrCode);\r\n","import React, { Component } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n//material-ui\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n//icons\r\nimport {\r\n  Gamepad,\r\n  Filmstrip,\r\n  BookOpenVariant,\r\n  Bitcoin,\r\n  Ethereum,\r\n  Github,\r\n  Information,\r\n  OpenInNew,\r\n  Facebook,\r\n  Linkedin,\r\n  Numeric3Box,\r\n  Twitter,\r\n  Whatsapp,\r\n} from \"mdi-material-ui\";\r\n//custom\r\nimport QrCode from \"../structure/QrCode\";\r\nimport config from \"../config.json\";\r\n\r\nclass About extends Component {\r\n  state = {\r\n    dialogInfo: false,\r\n    success: null\r\n  };\r\n\r\n  handleCopyClick = () => {\r\n    if (!this.state.success) {\r\n      this.setState({ success: true }, () => {\r\n        this.timer = setTimeout(() => {\r\n          this.setState({ success: false });\r\n        }, 1000);\r\n      });\r\n    }\r\n  };\r\n  handleDialogInfoOpen = () => {\r\n    this.setState({ dialogInfo: true });\r\n  };\r\n  handleDialogInfoClose = () => {\r\n    this.setState({ dialogInfo: false });\r\n  };\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const { dialogInfo, success } = this.state;\r\n\r\n    const questions = [\r\n      {\r\n        question: t(\"start.q1\"),\r\n        answer: t(\"start.a1\"),\r\n      },\r\n      {\r\n        question: t(\"start.q2\"),\r\n        answer: t(\"start.a2\"),\r\n      },\r\n      {\r\n        question: t(\"start.q3\"),\r\n        answer: t(\"start.a3\"),\r\n      },\r\n      {\r\n        question: t(\"start.q4\"),\r\n        answer: t(\"start.a4\"),\r\n      },\r\n    ];\r\n    const myContacts = [\r\n      { primary: \"LinkedIn\", secondary: \"\", link: \"https://www.linkedin.com/in/simonbuechi\", icon: <Linkedin /> },\r\n      { primary: \"Facebook\", secondary: \"\", link: \"https://www.linkedin.com/in/simonbuechi\", icon: <Facebook /> },\r\n      { primary: \"Twitter\", secondary: \"\", link: \"https://twitter.com/simonbuechi\", icon: <Twitter /> },\r\n      { primary: \"3Box\", secondary: \"\", link: \"https://3box.io/0x254b358a6047a03243971B4814b1AAfdF312EC56\", icon: <Numeric3Box /> },\r\n      { primary: \"Whatsapp\", secondary: \"\", link: \"https://wa.me/41787401627\", icon: <Whatsapp /> }\r\n    ];\r\n\r\n    const myCryptos = [\r\n      { primary: \"Ethereum Name System (ENS)\", secondary: config.ensName, qr: false, copy: true, icon: <Ethereum /> },\r\n      { primary: \"Ethereum\", secondary: config.ethereumAddress, qr: true, copy: true, icon: <Ethereum /> },\r\n      { primary: \"Bitcoin\", secondary: config.bitcoinAddress, qr: true, copy: true, icon: <Bitcoin /> },\r\n    ];\r\n\r\n    const myLinks = [\r\n      { primary: t(\"about.linksCode\"), secondary: t(\"about.linksCode2\"), link: \"https://github.com/simonbuechi\", icon: <Github /> },\r\n      {\r\n        primary: t(\"about.linksBooks\"),\r\n        secondary: t(\"about.linksBooks2\"),\r\n        link: \"https://www.goodreads.com/user/show/32950234-simon-b-chi\",\r\n        icon: <BookOpenVariant />,\r\n      },\r\n      { primary: t(\"about.linksMovies\"), secondary: t(\"about.linksMovies2\"), link: \"http://www.imdb.com/user/ur27356928/\", icon: <Filmstrip /> },\r\n      { primary: t(\"about.linksGames\"), secondary: t(\"about.linksGames2\"), link: \"https://www.igdb.com/users/simonbuechi\", icon: <Gamepad /> },\r\n    ];\r\n\r\n    return (\r\n      <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"flex-start\" spacing={4}>\r\n        <Helmet>\r\n          <title>Simon Buechi | About</title>\r\n          <meta name=\"description\" content=\"Simon Buechi Büchi about\" />\r\n        </Helmet>\r\n        <Grid item xs={12} md={12}>\r\n          <Typography variant=\"h2\" gutterBottom>\r\n            {t(\"about.title\")}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <Box mb={3}>\r\n            <Typography variant=\"h3\" gutterBottom>\r\n              {t(\"start.connectTitle\")}\r\n            </Typography>\r\n            <List dense>\r\n              {myContacts.map((item, index) => (\r\n                <Zoom in style={{ transitionDelay: 50 + index * 100 + \"ms\" }} key={item.primary}>\r\n                  <div>\r\n                    <ListItem button component=\"a\" href={item.link}>\r\n                      <ListItemIcon color=\"secondary\">{item.icon}</ListItemIcon>\r\n                      <ListItemText primary={item.primary} secondary={item.secondary} />\r\n                    </ListItem>\r\n                  </div>\r\n                </Zoom>\r\n              ))}\r\n            </List>\r\n          </Box>\r\n          <Typography variant=\"h3\" gutterBottom>\r\n            {t(\"about.aboutSiteTitle\")}\r\n          </Typography>\r\n          <Typography variant=\"body2\" gutterBottom>\r\n            {t(\"about.aboutSiteBody\")}\r\n          </Typography>\r\n          <Typography gutterBottom>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={this.handleDialogInfoOpen} startIcon={<Information />}>\r\n              {t(\"start.dialogInfoButton\")}\r\n            </Button>\r\n            &nbsp;\r\n            <Button variant=\"contained\" color=\"primary\" href=\"https://github.com/simonbuechi/dweb\" startIcon={<OpenInNew />}>\r\n              {t(\"about.linkGithub\")}\r\n            </Button>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <Typography variant=\"h3\" gutterBottom>\r\n            {t(\"about.blockchainTitle\")}\r\n          </Typography>\r\n          <List dense>\r\n            {myCryptos.map((item, index) => (\r\n              <Zoom in style={{ transitionDelay: 500 + index * 100 + \"ms\" }} key={item.primary}>\r\n                <div>\r\n                  <CopyToClipboard text={item.secondary} onCopy={this.handleCopyClick}>\r\n                    <ListItem button >\r\n                      <Tooltip title={success ? t(\"base.copied\") : t(\"base.copyClipboard\")} >\r\n                        <ListItemIcon color=\"secondary\">{item.icon}</ListItemIcon>\r\n                      </Tooltip>\r\n                      <ListItemText\r\n                        primary={item.primary}\r\n                        secondary={\r\n                          <Typography variant=\"body2\" noWrap>\r\n                            {item.secondary}\r\n                          </Typography>\r\n                        }\r\n                      />\r\n                      {item.qr && <QrCode text={item.secondary} />}\r\n                    </ListItem>\r\n                  </CopyToClipboard>\r\n\r\n                </div>\r\n              </Zoom>\r\n            ))}\r\n          </List>\r\n          <Typography variant=\"h3\" gutterBottom>\r\n            {t(\"about.linksTitle\")}\r\n          </Typography>\r\n          <Box>\r\n            <List dense>\r\n              {myLinks.map((item, index) => (\r\n                <Zoom in style={{ transitionDelay: 900 + index * 100 + \"ms\" }} key={item.primary}>\r\n                  <div>\r\n                    <ListItem button component=\"a\" href={item.link}>\r\n                      <ListItemIcon color=\"secondary\">{item.icon}</ListItemIcon>\r\n                      <ListItemText primary={item.primary} secondary={item.secondary} />\r\n                    </ListItem>\r\n                  </div>\r\n                </Zoom>\r\n              ))}\r\n            </List>\r\n          </Box>\r\n          <Dialog onClose={this.handleDialogInfoClose} aria-labelledby=\"dialogInfo\" open={dialogInfo}>\r\n            <DialogContent>\r\n              <Typography variant=\"h2\" gutterBottom>\r\n                {t(\"start.dialogInfoTitle\")}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"start.dialogInfoBody\")}\r\n              </Typography>\r\n              <List>\r\n                {questions.map((item, index) => (\r\n                  <ListItem key={index}>\r\n                    <ListItemText primary={item.question} secondary={item.answer} />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button color=\"primary\" variant=\"contained\" onClick={this.handleDialogInfoClose} autoFocus>\r\n                {t(\"base.close\")}\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(About);\r\n"],"sourceRoot":""}